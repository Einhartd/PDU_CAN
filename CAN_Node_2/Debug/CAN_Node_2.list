
CAN_Node_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d5c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004e70  08004e70  00014e70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f50  08004f50  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08004f50  08004f50  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f50  08004f50  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f50  08004f50  00014f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f54  08004f54  00014f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08004f58  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200000b0  08005008  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08005008  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008e9e  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000199c  00000000  00000000  00028fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000858  00000000  00000000  0002a958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000654  00000000  00000000  0002b1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017fdb  00000000  00000000  0002b804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008e45  00000000  00000000  000437df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086df5  00000000  00000000  0004c624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d24  00000000  00000000  000d341c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d6140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b0 	.word	0x200000b0
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e54 	.word	0x08004e54

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b4 	.word	0x200000b4
 800014c:	08004e54 	.word	0x08004e54

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__io_putchar>:
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

//	wyswietlanie tekstu
int __io_putchar(int ch)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b0a      	cmp	r3, #10
 8000a84:	d109      	bne.n	8000a9a <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 8000a86:	230d      	movs	r3, #13
 8000a88:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8000a8a:	f107 010f 	add.w	r1, r7, #15
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a92:	2201      	movs	r2, #1
 8000a94:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <__io_putchar+0x3c>)
 8000a96:	f002 fa15 	bl	8002ec4 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000a9a:	1d39      	adds	r1, r7, #4
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <__io_putchar+0x3c>)
 8000aa4:	f002 fa0e 	bl	8002ec4 <HAL_UART_Transmit>
    return 1;
 8000aa8:	2301      	movs	r3, #1
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200000f4 	.word	0x200000f4

08000ab8 <ReadFeedback>:


/* Funkcja czyta wartosci outputow dla poszczegolnych Feedbackow i zapisuje w liscie.
 * Oprocz tego przelicza ja na hex i porownuje z ta otrzymana w ramce
 * (brak rownosci oznacza krytyczny blad i PDU powinno zostac odlaczone TODO ).*/
int ReadFeedback(){
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b087      	sub	sp, #28
 8000abc:	af00      	add	r7, sp, #0
	int result;
	GPIO_PinState Feedback_Status;
	double Bit_Place = 0.0;
 8000abe:	f04f 0200 	mov.w	r2, #0
 8000ac2:	f04f 0300 	mov.w	r3, #0
 8000ac6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Feedback_Bit = 0;
 8000aca:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <ReadFeedback+0xcc>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
	int Feedback_Length = sizeof(Feedback_State) / sizeof(Feedback_State[0]);
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	607b      	str	r3, [r7, #4]
	for(int i=0; i<Feedback_Length; i++){
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	e03f      	b.n	8000b5a <ReadFeedback+0xa2>
		Feedback_Status = HAL_GPIO_ReadPin(Feedback_Port_List[i], Feedback_Pin_List[i]);
 8000ada:	4a2b      	ldr	r2, [pc, #172]	; (8000b88 <ReadFeedback+0xd0>)
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ae2:	492a      	ldr	r1, [pc, #168]	; (8000b8c <ReadFeedback+0xd4>)
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000aea:	4619      	mov	r1, r3
 8000aec:	4610      	mov	r0, r2
 8000aee:	f001 fd41 	bl	8002574 <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	70fb      	strb	r3, [r7, #3]
		(Feedback_Status==GPIO_PIN_SET) ? (Feedback_State[i]=1) : (Feedback_State[i]=0);
 8000af6:	78fb      	ldrb	r3, [r7, #3]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d105      	bne.n	8000b08 <ReadFeedback+0x50>
 8000afc:	4a24      	ldr	r2, [pc, #144]	; (8000b90 <ReadFeedback+0xd8>)
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	2101      	movs	r1, #1
 8000b02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b06:	e004      	b.n	8000b12 <ReadFeedback+0x5a>
 8000b08:	4a21      	ldr	r2, [pc, #132]	; (8000b90 <ReadFeedback+0xd8>)
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Bit_Place = pow(2.0, (double)i);
 8000b12:	6938      	ldr	r0, [r7, #16]
 8000b14:	f7ff fc6e 	bl	80003f4 <__aeabi_i2d>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b24:	f003 fa8e 	bl	8004044 <pow>
 8000b28:	e9c7 0102 	strd	r0, r1, [r7, #8]
		Feedback_Bit += Feedback_State[i] * (int)Bit_Place;
 8000b2c:	4a18      	ldr	r2, [pc, #96]	; (8000b90 <ReadFeedback+0xd8>)
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b34:	b2dc      	uxtb	r4, r3
 8000b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b3a:	f7ff ff75 	bl	8000a28 <__aeabi_d2iz>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	fb04 f303 	mul.w	r3, r4, r3
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <ReadFeedback+0xcc>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <ReadFeedback+0xcc>)
 8000b52:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<Feedback_Length; i++){
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	3301      	adds	r3, #1
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	dbbb      	blt.n	8000ada <ReadFeedback+0x22>
	}
	(RxData[0]==Feedback_Bit) ? (result=0) : (result=-1);
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <ReadFeedback+0xdc>)
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <ReadFeedback+0xcc>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d102      	bne.n	8000b74 <ReadFeedback+0xbc>
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	e002      	b.n	8000b7a <ReadFeedback+0xc2>
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b78:	617b      	str	r3, [r7, #20]
	return result;
 8000b7a:	697b      	ldr	r3, [r7, #20]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	371c      	adds	r7, #28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd90      	pop	{r4, r7, pc}
 8000b84:	2000014c 	.word	0x2000014c
 8000b88:	20000018 	.word	0x20000018
 8000b8c:	20000028 	.word	0x20000028
 8000b90:	2000013c 	.word	0x2000013c
 8000b94:	2000016c 	.word	0x2000016c

08000b98 <Precharge>:
	printf("TODO");
}



void Precharge(){	//	SA = 1, SB = 1, SC = 0 , SD = 0
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	//	SA = 1
	HAL_GPIO_WritePin(GPIO_Port_List[0], GPIO_Pin_List[0], GPIO_PIN_SET);
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <Precharge+0x58>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <Precharge+0x5c>)
 8000ba2:	8811      	ldrh	r1, [r2, #0]
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 fcfb 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000bac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bb0:	f000 fcb8 	bl	8001524 <HAL_Delay>
	//	SB = 1
	HAL_GPIO_WritePin(GPIO_Port_List[1], GPIO_Pin_List[1], GPIO_PIN_SET);
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <Precharge+0x58>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <Precharge+0x5c>)
 8000bba:	8851      	ldrh	r1, [r2, #2]
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 fcef 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000bc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bc8:	f000 fcac 	bl	8001524 <HAL_Delay>
	//	SC = 0
	HAL_GPIO_WritePin(GPIO_Port_List[2], GPIO_Pin_List[2], GPIO_PIN_RESET);
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <Precharge+0x58>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <Precharge+0x5c>)
 8000bd2:	8891      	ldrh	r1, [r2, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 fce3 	bl	80025a2 <HAL_GPIO_WritePin>
	//	SD = 0
	HAL_GPIO_WritePin(GPIO_Port_List[3], GPIO_Pin_List[3], GPIO_PIN_RESET);
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <Precharge+0x58>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <Precharge+0x5c>)
 8000be2:	88d1      	ldrh	r1, [r2, #6]
 8000be4:	2200      	movs	r2, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 fcdb 	bl	80025a2 <HAL_GPIO_WritePin>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000010 	.word	0x20000010

08000bf8 <Discharge>:

void Discharge(){	//	SA = 1, SB = 0, SC = 1 , SD = 0
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	//	SA = 1
	HAL_GPIO_WritePin(GPIO_Port_List[0], GPIO_Pin_List[0], GPIO_PIN_SET);
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <Discharge+0x68>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a18      	ldr	r2, [pc, #96]	; (8000c64 <Discharge+0x6c>)
 8000c02:	8811      	ldrh	r1, [r2, #0]
 8000c04:	2201      	movs	r2, #1
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 fccb 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000c0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c10:	f000 fc88 	bl	8001524 <HAL_Delay>
	//	SB = 0
	HAL_GPIO_WritePin(GPIO_Port_List[1], GPIO_Pin_List[1], GPIO_PIN_RESET);
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <Discharge+0x68>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <Discharge+0x6c>)
 8000c1a:	8851      	ldrh	r1, [r2, #2]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 fcbf 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000c24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c28:	f000 fc7c 	bl	8001524 <HAL_Delay>
	//	SC = 1
	HAL_GPIO_WritePin(GPIO_Port_List[2], GPIO_Pin_List[2], GPIO_PIN_SET);
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <Discharge+0x68>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	4a0c      	ldr	r2, [pc, #48]	; (8000c64 <Discharge+0x6c>)
 8000c32:	8891      	ldrh	r1, [r2, #4]
 8000c34:	2201      	movs	r2, #1
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 fcb3 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000c3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c40:	f000 fc70 	bl	8001524 <HAL_Delay>
	//	SD = 0
	HAL_GPIO_WritePin(GPIO_Port_List[3], GPIO_Pin_List[3], GPIO_PIN_RESET);
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <Discharge+0x68>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <Discharge+0x6c>)
 8000c4a:	88d1      	ldrh	r1, [r2, #6]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 fca7 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000c54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c58:	f000 fc64 	bl	8001524 <HAL_Delay>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000010 	.word	0x20000010

08000c68 <Off>:

void Off(){	//	SA = 0, SB = 0, SC = 0, SD = 0
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	//	SC = 0
	HAL_GPIO_WritePin(GPIO_Port_List[2], GPIO_Pin_List[2], GPIO_PIN_RESET);
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <Off+0x50>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <Off+0x54>)
 8000c72:	8891      	ldrh	r1, [r2, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fc93 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000c7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c80:	f000 fc50 	bl	8001524 <HAL_Delay>
	//	SA = 0
	HAL_GPIO_WritePin(GPIO_Port_List[0], GPIO_Pin_List[0], GPIO_PIN_RESET);
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <Off+0x50>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <Off+0x54>)
 8000c8a:	8811      	ldrh	r1, [r2, #0]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 fc87 	bl	80025a2 <HAL_GPIO_WritePin>
	//	SB = 0
	HAL_GPIO_WritePin(GPIO_Port_List[1], GPIO_Pin_List[1], GPIO_PIN_RESET);
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <Off+0x50>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <Off+0x54>)
 8000c9a:	8851      	ldrh	r1, [r2, #2]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 fc7f 	bl	80025a2 <HAL_GPIO_WritePin>
	//	SD = 0
	HAL_GPIO_WritePin(GPIO_Port_List[3], GPIO_Pin_List[3], GPIO_PIN_RESET);
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <Off+0x50>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <Off+0x54>)
 8000caa:	88d1      	ldrh	r1, [r2, #6]
 8000cac:	2200      	movs	r2, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 fc77 	bl	80025a2 <HAL_GPIO_WritePin>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000010 	.word	0x20000010

08000cc0 <HAL_GPIO_EXTI_Callback>:

//	INTERRUPTS
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin){
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cd0:	d11d      	bne.n	8000d0e <HAL_GPIO_EXTI_Callback+0x4e>
		printf("FA: %d; FB: %d; FC: %d; FD: %d\n", Feedback_State[0], Feedback_State[1], Feedback_State[2], Feedback_State[3]);
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x58>)
 8000cd4:	6819      	ldr	r1, [r3, #0]
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x58>)
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x58>)
 8000cdc:	6898      	ldr	r0, [r3, #8]
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x58>)
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ce8:	f002 fb2e 	bl	8003348 <iprintf>
		printf("Feedback bit: %x\n", Feedback_Bit);
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_GPIO_EXTI_Callback+0x60>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480c      	ldr	r0, [pc, #48]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x64>)
 8000cf4:	f002 fb28 	bl	8003348 <iprintf>
		(Error_Flag==0) ? printf("Good\n") : printf("Failure\n");
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_GPIO_EXTI_Callback+0x68>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d103      	bne.n	8000d08 <HAL_GPIO_EXTI_Callback+0x48>
 8000d00:	480a      	ldr	r0, [pc, #40]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000d02:	f002 fb21 	bl	8003348 <iprintf>
	}
}
 8000d06:	e002      	b.n	8000d0e <HAL_GPIO_EXTI_Callback+0x4e>
		(Error_Flag==0) ? printf("Good\n") : printf("Failure\n");
 8000d08:	4809      	ldr	r0, [pc, #36]	; (8000d30 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d0a:	f002 fb1d 	bl	8003348 <iprintf>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000013c 	.word	0x2000013c
 8000d1c:	08004e78 	.word	0x08004e78
 8000d20:	2000014c 	.word	0x2000014c
 8000d24:	08004e98 	.word	0x08004e98
 8000d28:	20000030 	.word	0x20000030
 8000d2c:	08004eac 	.word	0x08004eac
 8000d30:	08004eb4 	.word	0x08004eb4

08000d34 <HAL_CAN_RxFifo1MsgPendingCallback>:


//Funkcja odbierająca dane z CAN
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8000d3e:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 8000d40:	2101      	movs	r1, #1
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 fe1a 	bl	800197c <HAL_CAN_GetRxMessage>
	flag = 1;
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	2000016c 	.word	0x2000016c
 8000d5c:	20000150 	.word	0x20000150
 8000d60:	20000174 	.word	0x20000174

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d68:	f000 fb7a 	bl	8001460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6c:	f000 f842 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d70:	f000 f8fe 	bl	8000f70 <MX_GPIO_Init>
  MX_CAN_Init();
 8000d74:	f000 f880 	bl	8000e78 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000d78:	f000 f8d0 	bl	8000f1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Uruchomienie diody sprawdzajacej czy kontroler poprawnie dziala
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2120      	movs	r1, #32
 8000d80:	4816      	ldr	r0, [pc, #88]	; (8000ddc <main+0x78>)
 8000d82:	f001 fc0e 	bl	80025a2 <HAL_GPIO_WritePin>

  //Callback na przychodzącą wiadomość po CAN
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000d86:	2110      	movs	r1, #16
 8000d88:	4815      	ldr	r0, [pc, #84]	; (8000de0 <main+0x7c>)
 8000d8a:	f000 ff18 	bl	8001bbe <HAL_CAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag == 1){
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <main+0x80>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d11b      	bne.n	8000dce <main+0x6a>
		  flag = 0;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <main+0x80>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
		  if(RxHeader.StdId==PDU_ADD){
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <main+0x84>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d114      	bne.n	8000dce <main+0x6a>
			  switch(RxData[0]){
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <main+0x88>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b05      	cmp	r3, #5
 8000daa:	d006      	beq.n	8000dba <main+0x56>
 8000dac:	2b05      	cmp	r3, #5
 8000dae:	dc0d      	bgt.n	8000dcc <main+0x68>
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d008      	beq.n	8000dc6 <main+0x62>
 8000db4:	2b03      	cmp	r3, #3
 8000db6:	d003      	beq.n	8000dc0 <main+0x5c>
				  break;
			  case OFF:
				  Off();
				  break;
			  default:
				  break;
 8000db8:	e008      	b.n	8000dcc <main+0x68>
				  Discharge();
 8000dba:	f7ff ff1d 	bl	8000bf8 <Discharge>
				  break;
 8000dbe:	e006      	b.n	8000dce <main+0x6a>
				  Precharge();
 8000dc0:	f7ff feea 	bl	8000b98 <Precharge>
				  break;
 8000dc4:	e003      	b.n	8000dce <main+0x6a>
				  Off();
 8000dc6:	f7ff ff4f 	bl	8000c68 <Off>
				  break;
 8000dca:	e000      	b.n	8000dce <main+0x6a>
				  break;
 8000dcc:	bf00      	nop
			  }
		  }
	  }
	  Error_Flag = ReadFeedback();
 8000dce:	f7ff fe73 	bl	8000ab8 <ReadFeedback>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <main+0x8c>)
 8000dd6:	6013      	str	r3, [r2, #0]
	  if (flag == 1){
 8000dd8:	e7d9      	b.n	8000d8e <main+0x2a>
 8000dda:	bf00      	nop
 8000ddc:	40010800 	.word	0x40010800
 8000de0:	200000cc 	.word	0x200000cc
 8000de4:	20000174 	.word	0x20000174
 8000de8:	20000150 	.word	0x20000150
 8000dec:	2000016c 	.word	0x2000016c
 8000df0:	20000030 	.word	0x20000030

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b090      	sub	sp, #64	; 0x40
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0318 	add.w	r3, r7, #24
 8000dfe:	2228      	movs	r2, #40	; 0x28
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f002 faf5 	bl	80033f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1e:	2310      	movs	r3, #16
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e22:	2302      	movs	r3, #2
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e26:	2300      	movs	r3, #0
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e2a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e30:	f107 0318 	add.w	r3, r7, #24
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 fbe5 	bl	8002604 <HAL_RCC_OscConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e40:	f000 f91e 	bl	8001080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e44:	230f      	movs	r3, #15
 8000e46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 fe52 	bl	8002b08 <HAL_RCC_ClockConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e6a:	f000 f909 	bl	8001080 <Error_Handler>
  }
}
 8000e6e:	bf00      	nop
 8000e70:	3740      	adds	r7, #64	; 0x40
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000e7e:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <MX_CAN_Init+0x9c>)
 8000e80:	4a25      	ldr	r2, [pc, #148]	; (8000f18 <MX_CAN_Init+0xa0>)
 8000e82:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000e84:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <MX_CAN_Init+0x9c>)
 8000e86:	2210      	movs	r2, #16
 8000e88:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e8a:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <MX_CAN_Init+0x9c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e90:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <MX_CAN_Init+0x9c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <MX_CAN_Init+0x9c>)
 8000e98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e9c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <MX_CAN_Init+0x9c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MX_CAN_Init+0x9c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_CAN_Init+0x9c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <MX_CAN_Init+0x9c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_CAN_Init+0x9c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_CAN_Init+0x9c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_CAN_Init+0x9c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ec8:	4812      	ldr	r0, [pc, #72]	; (8000f14 <MX_CAN_Init+0x9c>)
 8000eca:	f000 fb4f 	bl	800156c <HAL_CAN_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000ed4:	f000 f8d4 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  HAL_CAN_Start(&hcan);
 8000ed8:	480e      	ldr	r0, [pc, #56]	; (8000f14 <MX_CAN_Init+0x9c>)
 8000eda:	f000 fd0b 	bl	80018f4 <HAL_CAN_Start>


  //	CAN FILTER
  CAN_FilterTypeDef filterConf;
  filterConf.FilterActivation = CAN_FILTER_ENABLE;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	623b      	str	r3, [r7, #32]
  filterConf.FilterBank = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  filterConf.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	613b      	str	r3, [r7, #16]
  filterConf.FilterIdHigh = 0x1<<5;
 8000eea:	2320      	movs	r3, #32
 8000eec:	603b      	str	r3, [r7, #0]
  filterConf.FilterIdLow = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
  filterConf.FilterMaskIdHigh = 0x1<<5;
 8000ef2:	2320      	movs	r3, #32
 8000ef4:	60bb      	str	r3, [r7, #8]
  filterConf.FilterMaskIdLow = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  filterConf.FilterMode = CAN_FILTERMODE_IDMASK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  filterConf.FilterScale = CAN_FILTERSCALE_32BIT;
 8000efe:	2301      	movs	r3, #1
 8000f00:	61fb      	str	r3, [r7, #28]
  HAL_CAN_ConfigFilter(&hcan, &filterConf);
 8000f02:	463b      	mov	r3, r7
 8000f04:	4619      	mov	r1, r3
 8000f06:	4803      	ldr	r0, [pc, #12]	; (8000f14 <MX_CAN_Init+0x9c>)
 8000f08:	f000 fc2b 	bl	8001762 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	3728      	adds	r7, #40	; 0x28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200000cc 	.word	0x200000cc
 8000f18:	40006400 	.word	0x40006400

08000f1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <MX_USART2_UART_Init+0x50>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f54:	f001 ff66 	bl	8002e24 <HAL_UART_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f5e:	f000 f88f 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000f4 	.word	0x200000f4
 8000f6c:	40004400 	.word	0x40004400

08000f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f84:	4b39      	ldr	r3, [pc, #228]	; (800106c <MX_GPIO_Init+0xfc>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a38      	ldr	r2, [pc, #224]	; (800106c <MX_GPIO_Init+0xfc>)
 8000f8a:	f043 0310 	orr.w	r3, r3, #16
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b36      	ldr	r3, [pc, #216]	; (800106c <MX_GPIO_Init+0xfc>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0310 	and.w	r3, r3, #16
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	4b33      	ldr	r3, [pc, #204]	; (800106c <MX_GPIO_Init+0xfc>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a32      	ldr	r2, [pc, #200]	; (800106c <MX_GPIO_Init+0xfc>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b30      	ldr	r3, [pc, #192]	; (800106c <MX_GPIO_Init+0xfc>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	; (800106c <MX_GPIO_Init+0xfc>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a2c      	ldr	r2, [pc, #176]	; (800106c <MX_GPIO_Init+0xfc>)
 8000fba:	f043 0308 	orr.w	r3, r3, #8
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	; (800106c <MX_GPIO_Init+0xfc>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0308 	and.w	r3, r3, #8
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SB_Pin|SA_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8000fd2:	4827      	ldr	r0, [pc, #156]	; (8001070 <MX_GPIO_Init+0x100>)
 8000fd4:	f001 fae5 	bl	80025a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_Pin|SC_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000fde:	4825      	ldr	r0, [pc, #148]	; (8001074 <MX_GPIO_Init+0x104>)
 8000fe0:	f001 fadf 	bl	80025a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <MX_GPIO_Init+0x108>)
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4820      	ldr	r0, [pc, #128]	; (800107c <MX_GPIO_Init+0x10c>)
 8000ffa:	f001 f937 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SB_Pin SA_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SB_Pin|SA_Pin;
 8000ffe:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2302      	movs	r3, #2
 800100e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	4619      	mov	r1, r3
 8001016:	4816      	ldr	r0, [pc, #88]	; (8001070 <MX_GPIO_Init+0x100>)
 8001018:	f001 f928 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : FD_Pin FA_Pin FC_Pin FB_Pin */
  GPIO_InitStruct.Pin = FD_Pin|FA_Pin|FC_Pin|FB_Pin;
 800101c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 0310 	add.w	r3, r7, #16
 800102e:	4619      	mov	r1, r3
 8001030:	4810      	ldr	r0, [pc, #64]	; (8001074 <MX_GPIO_Init+0x104>)
 8001032:	f001 f91b 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_Pin SC_Pin */
  GPIO_InitStruct.Pin = SD_Pin|SC_Pin;
 8001036:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800103a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2302      	movs	r3, #2
 8001046:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4619      	mov	r1, r3
 800104e:	4809      	ldr	r0, [pc, #36]	; (8001074 <MX_GPIO_Init+0x104>)
 8001050:	f001 f90c 	bl	800226c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	2028      	movs	r0, #40	; 0x28
 800105a:	f001 f8d0 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800105e:	2028      	movs	r0, #40	; 0x28
 8001060:	f001 f8e9 	bl	8002236 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40021000 	.word	0x40021000
 8001070:	40010800 	.word	0x40010800
 8001074:	40010c00 	.word	0x40010c00
 8001078:	10110000 	.word	0x10110000
 800107c:	40011000 	.word	0x40011000

08001080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001084:	b672      	cpsid	i
}
 8001086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001088:	e7fe      	b.n	8001088 <Error_Handler+0x8>
	...

0800108c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_MspInit+0x5c>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <HAL_MspInit+0x5c>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6193      	str	r3, [r2, #24]
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_MspInit+0x5c>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_MspInit+0x5c>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <HAL_MspInit+0x5c>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b4:	61d3      	str	r3, [r2, #28]
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <HAL_MspInit+0x5c>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_MspInit+0x60>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_MspInit+0x60>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010000 	.word	0x40010000

080010f0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a29      	ldr	r2, [pc, #164]	; (80011b0 <HAL_CAN_MspInit+0xc0>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d14b      	bne.n	80011a8 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001110:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <HAL_CAN_MspInit+0xc4>)
 8001112:	69db      	ldr	r3, [r3, #28]
 8001114:	4a27      	ldr	r2, [pc, #156]	; (80011b4 <HAL_CAN_MspInit+0xc4>)
 8001116:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800111a:	61d3      	str	r3, [r2, #28]
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <HAL_CAN_MspInit+0xc4>)
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <HAL_CAN_MspInit+0xc4>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a21      	ldr	r2, [pc, #132]	; (80011b4 <HAL_CAN_MspInit+0xc4>)
 800112e:	f043 0308 	orr.w	r3, r3, #8
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <HAL_CAN_MspInit+0xc4>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4818      	ldr	r0, [pc, #96]	; (80011b8 <HAL_CAN_MspInit+0xc8>)
 8001156:	f001 f889 	bl	800226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800115a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	4812      	ldr	r0, [pc, #72]	; (80011b8 <HAL_CAN_MspInit+0xc8>)
 8001170:	f001 f87c 	bl	800226c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_CAN_MspInit+0xcc>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_CAN_MspInit+0xcc>)
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 3, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2103      	movs	r1, #3
 800119c:	2015      	movs	r0, #21
 800119e:	f001 f82e 	bl	80021fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80011a2:	2015      	movs	r0, #21
 80011a4:	f001 f847 	bl	8002236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	; 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40006400 	.word	0x40006400
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40010c00 	.word	0x40010c00
 80011bc:	40010000 	.word	0x40010000

080011c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <HAL_UART_MspInit+0x88>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d12f      	bne.n	8001240 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <HAL_UART_MspInit+0x8c>)
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	4a19      	ldr	r2, [pc, #100]	; (800124c <HAL_UART_MspInit+0x8c>)
 80011e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ea:	61d3      	str	r3, [r2, #28]
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_UART_MspInit+0x8c>)
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <HAL_UART_MspInit+0x8c>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a13      	ldr	r2, [pc, #76]	; (800124c <HAL_UART_MspInit+0x8c>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_UART_MspInit+0x8c>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001210:	2304      	movs	r3, #4
 8001212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4619      	mov	r1, r3
 8001222:	480b      	ldr	r0, [pc, #44]	; (8001250 <HAL_UART_MspInit+0x90>)
 8001224:	f001 f822 	bl	800226c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001228:	2308      	movs	r3, #8
 800122a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4619      	mov	r1, r3
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <HAL_UART_MspInit+0x90>)
 800123c:	f001 f816 	bl	800226c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40004400 	.word	0x40004400
 800124c:	40021000 	.word	0x40021000
 8001250:	40010800 	.word	0x40010800

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <NMI_Handler+0x4>

0800125a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <MemManage_Handler+0x4>

08001266 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <UsageFault_Handler+0x4>

08001272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129a:	f000 f927 	bl	80014ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <CAN1_RX1_IRQHandler+0x10>)
 80012aa:	f000 fcad 	bl	8001c08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200000cc 	.word	0x200000cc

080012b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012c0:	f001 f988 	bl	80025d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	e00a      	b.n	80012f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012da:	f3af 8000 	nop.w
 80012de:	4601      	mov	r1, r0
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	60ba      	str	r2, [r7, #8]
 80012e6:	b2ca      	uxtb	r2, r1
 80012e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3301      	adds	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbf0      	blt.n	80012da <_read+0x12>
  }

  return len;
 80012f8:	687b      	ldr	r3, [r7, #4]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e009      	b.n	8001328 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60ba      	str	r2, [r7, #8]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fbab 	bl	8000a78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	dbf1      	blt.n	8001314 <_write+0x12>
  }
  return len;
 8001330:	687b      	ldr	r3, [r7, #4]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_close>:

int _close(int file)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001360:	605a      	str	r2, [r3, #4]
  return 0;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <_isatty>:

int _isatty(int file)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001382:	b480      	push	{r7}
 8001384:	b085      	sub	sp, #20
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
	...

0800139c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a4:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <_sbrk+0x5c>)
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <_sbrk+0x60>)
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <_sbrk+0x64>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <_sbrk+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d207      	bcs.n	80013dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013cc:	f002 f860 	bl	8003490 <__errno>
 80013d0:	4603      	mov	r3, r0
 80013d2:	220c      	movs	r2, #12
 80013d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013da:	e009      	b.n	80013f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <_sbrk+0x64>)
 80013ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20005000 	.word	0x20005000
 80013fc:	00000400 	.word	0x00000400
 8001400:	20000178 	.word	0x20000178
 8001404:	200002d0 	.word	0x200002d0

08001408 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001414:	f7ff fff8 	bl	8001408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800141a:	490c      	ldr	r1, [pc, #48]	; (800144c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800141c:	4a0c      	ldr	r2, [pc, #48]	; (8001450 <LoopFillZerobss+0x16>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001420:	e002      	b.n	8001428 <LoopCopyDataInit>

08001422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001426:	3304      	adds	r3, #4

08001428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800142c:	d3f9      	bcc.n	8001422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142e:	4a09      	ldr	r2, [pc, #36]	; (8001454 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001430:	4c09      	ldr	r4, [pc, #36]	; (8001458 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001434:	e001      	b.n	800143a <LoopFillZerobss>

08001436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001438:	3204      	adds	r2, #4

0800143a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800143c:	d3fb      	bcc.n	8001436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800143e:	f002 f82d 	bl	800349c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001442:	f7ff fc8f 	bl	8000d64 <main>
  bx lr
 8001446:	4770      	bx	lr
  ldr r0, =_sdata
 8001448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800144c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001450:	08004f58 	.word	0x08004f58
  ldr r2, =_sbss
 8001454:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001458:	200002cc 	.word	0x200002cc

0800145c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800145c:	e7fe      	b.n	800145c <ADC1_2_IRQHandler>
	...

08001460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_Init+0x28>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_Init+0x28>)
 800146a:	f043 0310 	orr.w	r3, r3, #16
 800146e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001470:	2003      	movs	r0, #3
 8001472:	f000 feb9 	bl	80021e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001476:	200f      	movs	r0, #15
 8001478:	f000 f808 	bl	800148c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800147c:	f7ff fe06 	bl	800108c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40022000 	.word	0x40022000

0800148c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_InitTick+0x54>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_InitTick+0x58>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fed1 	bl	8002252 <HAL_SYSTICK_Config>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00e      	b.n	80014d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b0f      	cmp	r3, #15
 80014be:	d80a      	bhi.n	80014d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c0:	2200      	movs	r2, #0
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014c8:	f000 fe99 	bl	80021fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <HAL_InitTick+0x5c>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e000      	b.n	80014d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000034 	.word	0x20000034
 80014e4:	2000003c 	.word	0x2000003c
 80014e8:	20000038 	.word	0x20000038

080014ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_IncTick+0x1c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_IncTick+0x20>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a03      	ldr	r2, [pc, #12]	; (800150c <HAL_IncTick+0x20>)
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	2000003c 	.word	0x2000003c
 800150c:	2000017c 	.word	0x2000017c

08001510 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return uwTick;
 8001514:	4b02      	ldr	r3, [pc, #8]	; (8001520 <HAL_GetTick+0x10>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	2000017c 	.word	0x2000017c

08001524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800152c:	f7ff fff0 	bl	8001510 <HAL_GetTick>
 8001530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800153c:	d005      	beq.n	800154a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_Delay+0x44>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4413      	add	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800154a:	bf00      	nop
 800154c:	f7ff ffe0 	bl	8001510 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	429a      	cmp	r2, r3
 800155a:	d8f7      	bhi.n	800154c <HAL_Delay+0x28>
  {
  }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000003c 	.word	0x2000003c

0800156c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e0ed      	b.n	800175a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d102      	bne.n	8001590 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff fdb0 	bl	80010f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0201 	orr.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a0:	f7ff ffb6 	bl	8001510 <HAL_GetTick>
 80015a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015a6:	e012      	b.n	80015ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015a8:	f7ff ffb2 	bl	8001510 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b0a      	cmp	r3, #10
 80015b4:	d90b      	bls.n	80015ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2205      	movs	r2, #5
 80015c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0c5      	b.n	800175a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0e5      	beq.n	80015a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0202 	bic.w	r2, r2, #2
 80015ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015ec:	f7ff ff90 	bl	8001510 <HAL_GetTick>
 80015f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015f2:	e012      	b.n	800161a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015f4:	f7ff ff8c 	bl	8001510 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b0a      	cmp	r3, #10
 8001600:	d90b      	bls.n	800161a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2205      	movs	r2, #5
 8001612:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e09f      	b.n	800175a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1e5      	bne.n	80015f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	7e1b      	ldrb	r3, [r3, #24]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d108      	bne.n	8001642 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	e007      	b.n	8001652 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001650:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7e5b      	ldrb	r3, [r3, #25]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d108      	bne.n	800166c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	e007      	b.n	800167c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800167a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7e9b      	ldrb	r3, [r3, #26]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d108      	bne.n	8001696 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0220 	orr.w	r2, r2, #32
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	e007      	b.n	80016a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0220 	bic.w	r2, r2, #32
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7edb      	ldrb	r3, [r3, #27]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d108      	bne.n	80016c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0210 	bic.w	r2, r2, #16
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	e007      	b.n	80016d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0210 	orr.w	r2, r2, #16
 80016ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7f1b      	ldrb	r3, [r3, #28]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d108      	bne.n	80016ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0208 	orr.w	r2, r2, #8
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	e007      	b.n	80016fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0208 	bic.w	r2, r2, #8
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7f5b      	ldrb	r3, [r3, #29]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d108      	bne.n	8001714 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f042 0204 	orr.w	r2, r2, #4
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	e007      	b.n	8001724 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0204 	bic.w	r2, r2, #4
 8001722:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	ea42 0103 	orr.w	r1, r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	1e5a      	subs	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001762:	b480      	push	{r7}
 8001764:	b087      	sub	sp, #28
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001778:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800177a:	7cfb      	ldrb	r3, [r7, #19]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d003      	beq.n	8001788 <HAL_CAN_ConfigFilter+0x26>
 8001780:	7cfb      	ldrb	r3, [r7, #19]
 8001782:	2b02      	cmp	r3, #2
 8001784:	f040 80aa 	bne.w	80018dc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800178e:	f043 0201 	orr.w	r2, r3, #1
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	f003 031f 	and.w	r3, r3, #31
 80017a0:	2201      	movs	r2, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d123      	bne.n	800180a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	401a      	ands	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3248      	adds	r2, #72	; 0x48
 80017ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001800:	6979      	ldr	r1, [r7, #20]
 8001802:	3348      	adds	r3, #72	; 0x48
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	440b      	add	r3, r1
 8001808:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d122      	bne.n	8001858 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	431a      	orrs	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001832:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3248      	adds	r2, #72	; 0x48
 8001838:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800184c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800184e:	6979      	ldr	r1, [r7, #20]
 8001850:	3348      	adds	r3, #72	; 0x48
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	440b      	add	r3, r1
 8001856:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43db      	mvns	r3, r3
 800186a:	401a      	ands	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001872:	e007      	b.n	8001884 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	431a      	orrs	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d109      	bne.n	80018a0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	43db      	mvns	r3, r3
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800189e:	e007      	b.n	80018b0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	431a      	orrs	r2, r3
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d107      	bne.n	80018c8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	431a      	orrs	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018ce:	f023 0201 	bic.w	r2, r3, #1
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	e006      	b.n	80018ea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
  }
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	371c      	adds	r7, #28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b01      	cmp	r3, #1
 8001906:	d12e      	bne.n	8001966 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2202      	movs	r2, #2
 800190c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001920:	f7ff fdf6 	bl	8001510 <HAL_GetTick>
 8001924:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001926:	e012      	b.n	800194e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001928:	f7ff fdf2 	bl	8001510 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b0a      	cmp	r3, #10
 8001934:	d90b      	bls.n	800194e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2205      	movs	r2, #5
 8001946:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e012      	b.n	8001974 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1e5      	bne.n	8001928 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	e006      	b.n	8001974 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
  }
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001990:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001992:	7dfb      	ldrb	r3, [r7, #23]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d003      	beq.n	80019a0 <HAL_CAN_GetRxMessage+0x24>
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	2b02      	cmp	r3, #2
 800199c:	f040 8103 	bne.w	8001ba6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10e      	bne.n	80019c4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d116      	bne.n	80019e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0f7      	b.n	8001bb4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d107      	bne.n	80019e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e0e8      	b.n	8001bb4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	331b      	adds	r3, #27
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	4413      	add	r3, r2
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0204 	and.w	r2, r3, #4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10c      	bne.n	8001a1a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	331b      	adds	r3, #27
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	4413      	add	r3, r2
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	0d5b      	lsrs	r3, r3, #21
 8001a10:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	e00b      	b.n	8001a32 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	331b      	adds	r3, #27
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	4413      	add	r3, r2
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	331b      	adds	r3, #27
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	4413      	add	r3, r2
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0202 	and.w	r2, r3, #2
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	331b      	adds	r3, #27
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	4413      	add	r3, r2
 8001a54:	3304      	adds	r3, #4
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2208      	movs	r2, #8
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	e00b      	b.n	8001a80 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	331b      	adds	r3, #27
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	4413      	add	r3, r2
 8001a74:	3304      	adds	r3, #4
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 020f 	and.w	r2, r3, #15
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	331b      	adds	r3, #27
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	331b      	adds	r3, #27
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0c1b      	lsrs	r3, r3, #16
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	011b      	lsls	r3, r3, #4
 8001ab8:	4413      	add	r3, r2
 8001aba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	0a1a      	lsrs	r2, r3, #8
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0c1a      	lsrs	r2, r3, #16
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	3302      	adds	r3, #2
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	0e1a      	lsrs	r2, r3, #24
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	3303      	adds	r3, #3
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	3304      	adds	r3, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0a1a      	lsrs	r2, r3, #8
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	3305      	adds	r3, #5
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	0c1a      	lsrs	r2, r3, #16
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	3306      	adds	r3, #6
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0e1a      	lsrs	r2, r3, #24
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	3307      	adds	r3, #7
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d108      	bne.n	8001b92 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0220 	orr.w	r2, r2, #32
 8001b8e:	60da      	str	r2, [r3, #12]
 8001b90:	e007      	b.n	8001ba2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0220 	orr.w	r2, r2, #32
 8001ba0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e006      	b.n	8001bb4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
  }
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bce:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d002      	beq.n	8001bdc <HAL_CAN_ActivateNotification+0x1e>
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d109      	bne.n	8001bf0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6959      	ldr	r1, [r3, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e006      	b.n	8001bfe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
  }
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d07c      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d023      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f983 	bl	8001f76 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c70:	e016      	b.n	8001ca0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
 8001c84:	e00c      	b.n	8001ca0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
 8001c98:	e002      	b.n	8001ca0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f986 	bl	8001fac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d024      	beq.n	8001cf4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f962 	bl	8001f88 <HAL_CAN_TxMailbox1CompleteCallback>
 8001cc4:	e016      	b.n	8001cf4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d004      	beq.n	8001cda <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	e00c      	b.n	8001cf4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d004      	beq.n	8001cee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
 8001cec:	e002      	b.n	8001cf4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f965 	bl	8001fbe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d024      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d06:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f941 	bl	8001f9a <HAL_CAN_TxMailbox2CompleteCallback>
 8001d18:	e016      	b.n	8001d48 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d004      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2c:	e00c      	b.n	8001d48 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d004      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d40:	e002      	b.n	8001d48 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f944 	bl	8001fd0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00c      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d007      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2210      	movs	r2, #16
 8001d6a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d006      	beq.n	8001d8e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2208      	movs	r2, #8
 8001d86:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f933 	bl	8001ff4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d009      	beq.n	8001dac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f91b 	bl	8001fe2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00c      	beq.n	8001dd0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2210      	movs	r2, #16
 8001dce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	f003 0320 	and.w	r3, r3, #32
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00b      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2208      	movs	r2, #8
 8001dea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f90a 	bl	8002006 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d009      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7fe ff92 	bl	8000d34 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d006      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2210      	movs	r2, #16
 8001e2a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f8f3 	bl	8002018 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00b      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d006      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8eb 	bl	800202a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d07b      	beq.n	8001f56 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d072      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d008      	beq.n	8001e84 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d008      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	f043 0302 	orr.w	r3, r3, #2
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d008      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	f043 0304 	orr.w	r3, r3, #4
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d043      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d03e      	beq.n	8001f4e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ed6:	2b60      	cmp	r3, #96	; 0x60
 8001ed8:	d02b      	beq.n	8001f32 <HAL_CAN_IRQHandler+0x32a>
 8001eda:	2b60      	cmp	r3, #96	; 0x60
 8001edc:	d82e      	bhi.n	8001f3c <HAL_CAN_IRQHandler+0x334>
 8001ede:	2b50      	cmp	r3, #80	; 0x50
 8001ee0:	d022      	beq.n	8001f28 <HAL_CAN_IRQHandler+0x320>
 8001ee2:	2b50      	cmp	r3, #80	; 0x50
 8001ee4:	d82a      	bhi.n	8001f3c <HAL_CAN_IRQHandler+0x334>
 8001ee6:	2b40      	cmp	r3, #64	; 0x40
 8001ee8:	d019      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x316>
 8001eea:	2b40      	cmp	r3, #64	; 0x40
 8001eec:	d826      	bhi.n	8001f3c <HAL_CAN_IRQHandler+0x334>
 8001eee:	2b30      	cmp	r3, #48	; 0x30
 8001ef0:	d010      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x30c>
 8001ef2:	2b30      	cmp	r3, #48	; 0x30
 8001ef4:	d822      	bhi.n	8001f3c <HAL_CAN_IRQHandler+0x334>
 8001ef6:	2b10      	cmp	r3, #16
 8001ef8:	d002      	beq.n	8001f00 <HAL_CAN_IRQHandler+0x2f8>
 8001efa:	2b20      	cmp	r3, #32
 8001efc:	d005      	beq.n	8001f0a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001efe:	e01d      	b.n	8001f3c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	f043 0308 	orr.w	r3, r3, #8
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f08:	e019      	b.n	8001f3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	f043 0310 	orr.w	r3, r3, #16
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f12:	e014      	b.n	8001f3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	f043 0320 	orr.w	r3, r3, #32
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f1c:	e00f      	b.n	8001f3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f26:	e00a      	b.n	8001f3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f30:	e005      	b.n	8001f3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f3a:	e000      	b.n	8001f3e <HAL_CAN_IRQHandler+0x336>
            break;
 8001f3c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699a      	ldr	r2, [r3, #24]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f4c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2204      	movs	r2, #4
 8001f54:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f867 	bl	800203c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	; 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr

08001f9a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
	...

08002050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800206c:	4013      	ands	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800207c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002082:	4a04      	ldr	r2, [pc, #16]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	60d3      	str	r3, [r2, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <__NVIC_GetPriorityGrouping+0x18>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	f003 0307 	and.w	r3, r3, #7
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	db0b      	blt.n	80020de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	f003 021f 	and.w	r2, r3, #31
 80020cc:	4906      	ldr	r1, [pc, #24]	; (80020e8 <__NVIC_EnableIRQ+0x34>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	2001      	movs	r0, #1
 80020d6:	fa00 f202 	lsl.w	r2, r0, r2
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	e000e100 	.word	0xe000e100

080020ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	db0a      	blt.n	8002116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	b2da      	uxtb	r2, r3
 8002104:	490c      	ldr	r1, [pc, #48]	; (8002138 <__NVIC_SetPriority+0x4c>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	0112      	lsls	r2, r2, #4
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	440b      	add	r3, r1
 8002110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002114:	e00a      	b.n	800212c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4908      	ldr	r1, [pc, #32]	; (800213c <__NVIC_SetPriority+0x50>)
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	3b04      	subs	r3, #4
 8002124:	0112      	lsls	r2, r2, #4
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	440b      	add	r3, r1
 800212a:	761a      	strb	r2, [r3, #24]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000e100 	.word	0xe000e100
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	; 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f1c3 0307 	rsb	r3, r3, #7
 800215a:	2b04      	cmp	r3, #4
 800215c:	bf28      	it	cs
 800215e:	2304      	movcs	r3, #4
 8002160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3304      	adds	r3, #4
 8002166:	2b06      	cmp	r3, #6
 8002168:	d902      	bls.n	8002170 <NVIC_EncodePriority+0x30>
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3b03      	subs	r3, #3
 800216e:	e000      	b.n	8002172 <NVIC_EncodePriority+0x32>
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	401a      	ands	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002188:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa01 f303 	lsl.w	r3, r1, r3
 8002192:	43d9      	mvns	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	4313      	orrs	r3, r2
         );
}
 800219a:	4618      	mov	r0, r3
 800219c:	3724      	adds	r7, #36	; 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b4:	d301      	bcc.n	80021ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b6:	2301      	movs	r3, #1
 80021b8:	e00f      	b.n	80021da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <SysTick_Config+0x40>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3b01      	subs	r3, #1
 80021c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c2:	210f      	movs	r1, #15
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021c8:	f7ff ff90 	bl	80020ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <SysTick_Config+0x40>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <SysTick_Config+0x40>)
 80021d4:	2207      	movs	r2, #7
 80021d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	e000e010 	.word	0xe000e010

080021e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff2d 	bl	8002050 <__NVIC_SetPriorityGrouping>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002210:	f7ff ff42 	bl	8002098 <__NVIC_GetPriorityGrouping>
 8002214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	6978      	ldr	r0, [r7, #20]
 800221c:	f7ff ff90 	bl	8002140 <NVIC_EncodePriority>
 8002220:	4602      	mov	r2, r0
 8002222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff5f 	bl	80020ec <__NVIC_SetPriority>
}
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff35 	bl	80020b4 <__NVIC_EnableIRQ>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffa2 	bl	80021a4 <SysTick_Config>
 8002260:	4603      	mov	r3, r0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b08b      	sub	sp, #44	; 0x2c
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800227e:	e169      	b.n	8002554 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002280:	2201      	movs	r2, #1
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	429a      	cmp	r2, r3
 800229a:	f040 8158 	bne.w	800254e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4a9a      	ldr	r2, [pc, #616]	; (800250c <HAL_GPIO_Init+0x2a0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d05e      	beq.n	8002366 <HAL_GPIO_Init+0xfa>
 80022a8:	4a98      	ldr	r2, [pc, #608]	; (800250c <HAL_GPIO_Init+0x2a0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d875      	bhi.n	800239a <HAL_GPIO_Init+0x12e>
 80022ae:	4a98      	ldr	r2, [pc, #608]	; (8002510 <HAL_GPIO_Init+0x2a4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d058      	beq.n	8002366 <HAL_GPIO_Init+0xfa>
 80022b4:	4a96      	ldr	r2, [pc, #600]	; (8002510 <HAL_GPIO_Init+0x2a4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d86f      	bhi.n	800239a <HAL_GPIO_Init+0x12e>
 80022ba:	4a96      	ldr	r2, [pc, #600]	; (8002514 <HAL_GPIO_Init+0x2a8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d052      	beq.n	8002366 <HAL_GPIO_Init+0xfa>
 80022c0:	4a94      	ldr	r2, [pc, #592]	; (8002514 <HAL_GPIO_Init+0x2a8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d869      	bhi.n	800239a <HAL_GPIO_Init+0x12e>
 80022c6:	4a94      	ldr	r2, [pc, #592]	; (8002518 <HAL_GPIO_Init+0x2ac>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d04c      	beq.n	8002366 <HAL_GPIO_Init+0xfa>
 80022cc:	4a92      	ldr	r2, [pc, #584]	; (8002518 <HAL_GPIO_Init+0x2ac>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d863      	bhi.n	800239a <HAL_GPIO_Init+0x12e>
 80022d2:	4a92      	ldr	r2, [pc, #584]	; (800251c <HAL_GPIO_Init+0x2b0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d046      	beq.n	8002366 <HAL_GPIO_Init+0xfa>
 80022d8:	4a90      	ldr	r2, [pc, #576]	; (800251c <HAL_GPIO_Init+0x2b0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d85d      	bhi.n	800239a <HAL_GPIO_Init+0x12e>
 80022de:	2b12      	cmp	r3, #18
 80022e0:	d82a      	bhi.n	8002338 <HAL_GPIO_Init+0xcc>
 80022e2:	2b12      	cmp	r3, #18
 80022e4:	d859      	bhi.n	800239a <HAL_GPIO_Init+0x12e>
 80022e6:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <HAL_GPIO_Init+0x80>)
 80022e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ec:	08002367 	.word	0x08002367
 80022f0:	08002341 	.word	0x08002341
 80022f4:	08002353 	.word	0x08002353
 80022f8:	08002395 	.word	0x08002395
 80022fc:	0800239b 	.word	0x0800239b
 8002300:	0800239b 	.word	0x0800239b
 8002304:	0800239b 	.word	0x0800239b
 8002308:	0800239b 	.word	0x0800239b
 800230c:	0800239b 	.word	0x0800239b
 8002310:	0800239b 	.word	0x0800239b
 8002314:	0800239b 	.word	0x0800239b
 8002318:	0800239b 	.word	0x0800239b
 800231c:	0800239b 	.word	0x0800239b
 8002320:	0800239b 	.word	0x0800239b
 8002324:	0800239b 	.word	0x0800239b
 8002328:	0800239b 	.word	0x0800239b
 800232c:	0800239b 	.word	0x0800239b
 8002330:	08002349 	.word	0x08002349
 8002334:	0800235d 	.word	0x0800235d
 8002338:	4a79      	ldr	r2, [pc, #484]	; (8002520 <HAL_GPIO_Init+0x2b4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d013      	beq.n	8002366 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800233e:	e02c      	b.n	800239a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	623b      	str	r3, [r7, #32]
          break;
 8002346:	e029      	b.n	800239c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	3304      	adds	r3, #4
 800234e:	623b      	str	r3, [r7, #32]
          break;
 8002350:	e024      	b.n	800239c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	3308      	adds	r3, #8
 8002358:	623b      	str	r3, [r7, #32]
          break;
 800235a:	e01f      	b.n	800239c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	330c      	adds	r3, #12
 8002362:	623b      	str	r3, [r7, #32]
          break;
 8002364:	e01a      	b.n	800239c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d102      	bne.n	8002374 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800236e:	2304      	movs	r3, #4
 8002370:	623b      	str	r3, [r7, #32]
          break;
 8002372:	e013      	b.n	800239c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d105      	bne.n	8002388 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800237c:	2308      	movs	r3, #8
 800237e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	611a      	str	r2, [r3, #16]
          break;
 8002386:	e009      	b.n	800239c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002388:	2308      	movs	r3, #8
 800238a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	615a      	str	r2, [r3, #20]
          break;
 8002392:	e003      	b.n	800239c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002394:	2300      	movs	r3, #0
 8002396:	623b      	str	r3, [r7, #32]
          break;
 8002398:	e000      	b.n	800239c <HAL_GPIO_Init+0x130>
          break;
 800239a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2bff      	cmp	r3, #255	; 0xff
 80023a0:	d801      	bhi.n	80023a6 <HAL_GPIO_Init+0x13a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	e001      	b.n	80023aa <HAL_GPIO_Init+0x13e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3304      	adds	r3, #4
 80023aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2bff      	cmp	r3, #255	; 0xff
 80023b0:	d802      	bhi.n	80023b8 <HAL_GPIO_Init+0x14c>
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	e002      	b.n	80023be <HAL_GPIO_Init+0x152>
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	3b08      	subs	r3, #8
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	210f      	movs	r1, #15
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	401a      	ands	r2, r3
 80023d0:	6a39      	ldr	r1, [r7, #32]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	fa01 f303 	lsl.w	r3, r1, r3
 80023d8:	431a      	orrs	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 80b1 	beq.w	800254e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023ec:	4b4d      	ldr	r3, [pc, #308]	; (8002524 <HAL_GPIO_Init+0x2b8>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4a4c      	ldr	r2, [pc, #304]	; (8002524 <HAL_GPIO_Init+0x2b8>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6193      	str	r3, [r2, #24]
 80023f8:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <HAL_GPIO_Init+0x2b8>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002404:	4a48      	ldr	r2, [pc, #288]	; (8002528 <HAL_GPIO_Init+0x2bc>)
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	3302      	adds	r3, #2
 800240c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002410:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	220f      	movs	r2, #15
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4013      	ands	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a40      	ldr	r2, [pc, #256]	; (800252c <HAL_GPIO_Init+0x2c0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d013      	beq.n	8002458 <HAL_GPIO_Init+0x1ec>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a3f      	ldr	r2, [pc, #252]	; (8002530 <HAL_GPIO_Init+0x2c4>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d00d      	beq.n	8002454 <HAL_GPIO_Init+0x1e8>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a3e      	ldr	r2, [pc, #248]	; (8002534 <HAL_GPIO_Init+0x2c8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d007      	beq.n	8002450 <HAL_GPIO_Init+0x1e4>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a3d      	ldr	r2, [pc, #244]	; (8002538 <HAL_GPIO_Init+0x2cc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d101      	bne.n	800244c <HAL_GPIO_Init+0x1e0>
 8002448:	2303      	movs	r3, #3
 800244a:	e006      	b.n	800245a <HAL_GPIO_Init+0x1ee>
 800244c:	2304      	movs	r3, #4
 800244e:	e004      	b.n	800245a <HAL_GPIO_Init+0x1ee>
 8002450:	2302      	movs	r3, #2
 8002452:	e002      	b.n	800245a <HAL_GPIO_Init+0x1ee>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <HAL_GPIO_Init+0x1ee>
 8002458:	2300      	movs	r3, #0
 800245a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245c:	f002 0203 	and.w	r2, r2, #3
 8002460:	0092      	lsls	r2, r2, #2
 8002462:	4093      	lsls	r3, r2
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800246a:	492f      	ldr	r1, [pc, #188]	; (8002528 <HAL_GPIO_Init+0x2bc>)
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	089b      	lsrs	r3, r3, #2
 8002470:	3302      	adds	r3, #2
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d006      	beq.n	8002492 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002484:	4b2d      	ldr	r3, [pc, #180]	; (800253c <HAL_GPIO_Init+0x2d0>)
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	492c      	ldr	r1, [pc, #176]	; (800253c <HAL_GPIO_Init+0x2d0>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	608b      	str	r3, [r1, #8]
 8002490:	e006      	b.n	80024a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002492:	4b2a      	ldr	r3, [pc, #168]	; (800253c <HAL_GPIO_Init+0x2d0>)
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	43db      	mvns	r3, r3
 800249a:	4928      	ldr	r1, [pc, #160]	; (800253c <HAL_GPIO_Init+0x2d0>)
 800249c:	4013      	ands	r3, r2
 800249e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d006      	beq.n	80024ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024ac:	4b23      	ldr	r3, [pc, #140]	; (800253c <HAL_GPIO_Init+0x2d0>)
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	4922      	ldr	r1, [pc, #136]	; (800253c <HAL_GPIO_Init+0x2d0>)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60cb      	str	r3, [r1, #12]
 80024b8:	e006      	b.n	80024c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <HAL_GPIO_Init+0x2d0>)
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	491e      	ldr	r1, [pc, #120]	; (800253c <HAL_GPIO_Init+0x2d0>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d006      	beq.n	80024e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_GPIO_Init+0x2d0>)
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	4918      	ldr	r1, [pc, #96]	; (800253c <HAL_GPIO_Init+0x2d0>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
 80024e0:	e006      	b.n	80024f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <HAL_GPIO_Init+0x2d0>)
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	4914      	ldr	r1, [pc, #80]	; (800253c <HAL_GPIO_Init+0x2d0>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d021      	beq.n	8002540 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <HAL_GPIO_Init+0x2d0>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	490e      	ldr	r1, [pc, #56]	; (800253c <HAL_GPIO_Init+0x2d0>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
 8002508:	e021      	b.n	800254e <HAL_GPIO_Init+0x2e2>
 800250a:	bf00      	nop
 800250c:	10320000 	.word	0x10320000
 8002510:	10310000 	.word	0x10310000
 8002514:	10220000 	.word	0x10220000
 8002518:	10210000 	.word	0x10210000
 800251c:	10120000 	.word	0x10120000
 8002520:	10110000 	.word	0x10110000
 8002524:	40021000 	.word	0x40021000
 8002528:	40010000 	.word	0x40010000
 800252c:	40010800 	.word	0x40010800
 8002530:	40010c00 	.word	0x40010c00
 8002534:	40011000 	.word	0x40011000
 8002538:	40011400 	.word	0x40011400
 800253c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_GPIO_Init+0x304>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	43db      	mvns	r3, r3
 8002548:	4909      	ldr	r1, [pc, #36]	; (8002570 <HAL_GPIO_Init+0x304>)
 800254a:	4013      	ands	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	3301      	adds	r3, #1
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	fa22 f303 	lsr.w	r3, r2, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	f47f ae8e 	bne.w	8002280 <HAL_GPIO_Init+0x14>
  }
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	372c      	adds	r7, #44	; 0x2c
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	40010400 	.word	0x40010400

08002574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	887b      	ldrh	r3, [r7, #2]
 8002586:	4013      	ands	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	e001      	b.n	8002596 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002596:	7bfb      	ldrb	r3, [r7, #15]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr

080025a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	807b      	strh	r3, [r7, #2]
 80025ae:	4613      	mov	r3, r2
 80025b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b2:	787b      	ldrb	r3, [r7, #1]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025b8:	887a      	ldrh	r2, [r7, #2]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025be:	e003      	b.n	80025c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025c0:	887b      	ldrh	r3, [r7, #2]
 80025c2:	041a      	lsls	r2, r3, #16
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	611a      	str	r2, [r3, #16]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
	...

080025d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d006      	beq.n	80025f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ea:	4a05      	ldr	r2, [pc, #20]	; (8002600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fb64 	bl	8000cc0 <HAL_GPIO_EXTI_Callback>
  }
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40010400 	.word	0x40010400

08002604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e272      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8087 	beq.w	8002732 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002624:	4b92      	ldr	r3, [pc, #584]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 030c 	and.w	r3, r3, #12
 800262c:	2b04      	cmp	r3, #4
 800262e:	d00c      	beq.n	800264a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002630:	4b8f      	ldr	r3, [pc, #572]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b08      	cmp	r3, #8
 800263a:	d112      	bne.n	8002662 <HAL_RCC_OscConfig+0x5e>
 800263c:	4b8c      	ldr	r3, [pc, #560]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002648:	d10b      	bne.n	8002662 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264a:	4b89      	ldr	r3, [pc, #548]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d06c      	beq.n	8002730 <HAL_RCC_OscConfig+0x12c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d168      	bne.n	8002730 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e24c      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266a:	d106      	bne.n	800267a <HAL_RCC_OscConfig+0x76>
 800266c:	4b80      	ldr	r3, [pc, #512]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a7f      	ldr	r2, [pc, #508]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	e02e      	b.n	80026d8 <HAL_RCC_OscConfig+0xd4>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10c      	bne.n	800269c <HAL_RCC_OscConfig+0x98>
 8002682:	4b7b      	ldr	r3, [pc, #492]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a7a      	ldr	r2, [pc, #488]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	4b78      	ldr	r3, [pc, #480]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a77      	ldr	r2, [pc, #476]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e01d      	b.n	80026d8 <HAL_RCC_OscConfig+0xd4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0xbc>
 80026a6:	4b72      	ldr	r3, [pc, #456]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a71      	ldr	r2, [pc, #452]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b6f      	ldr	r3, [pc, #444]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6e      	ldr	r2, [pc, #440]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e00b      	b.n	80026d8 <HAL_RCC_OscConfig+0xd4>
 80026c0:	4b6b      	ldr	r3, [pc, #428]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a6a      	ldr	r2, [pc, #424]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b68      	ldr	r3, [pc, #416]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a67      	ldr	r2, [pc, #412]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d013      	beq.n	8002708 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe ff16 	bl	8001510 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e8:	f7fe ff12 	bl	8001510 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e200      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0xe4>
 8002706:	e014      	b.n	8002732 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe ff02 	bl	8001510 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002710:	f7fe fefe 	bl	8001510 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e1ec      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	4b53      	ldr	r3, [pc, #332]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x10c>
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d063      	beq.n	8002806 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800273e:	4b4c      	ldr	r3, [pc, #304]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800274a:	4b49      	ldr	r3, [pc, #292]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b08      	cmp	r3, #8
 8002754:	d11c      	bne.n	8002790 <HAL_RCC_OscConfig+0x18c>
 8002756:	4b46      	ldr	r3, [pc, #280]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d116      	bne.n	8002790 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002762:	4b43      	ldr	r3, [pc, #268]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_RCC_OscConfig+0x176>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d001      	beq.n	800277a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e1c0      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277a:	4b3d      	ldr	r3, [pc, #244]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4939      	ldr	r1, [pc, #228]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278e:	e03a      	b.n	8002806 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002798:	4b36      	ldr	r3, [pc, #216]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7fe feb7 	bl	8001510 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a6:	f7fe feb3 	bl	8001510 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e1a1      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4927      	ldr	r1, [pc, #156]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]
 80027d8:	e015      	b.n	8002806 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7fe fe96 	bl	8001510 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e8:	f7fe fe92 	bl	8001510 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e180      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d03a      	beq.n	8002888 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d019      	beq.n	800284e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281a:	4b17      	ldr	r3, [pc, #92]	; (8002878 <HAL_RCC_OscConfig+0x274>)
 800281c:	2201      	movs	r2, #1
 800281e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002820:	f7fe fe76 	bl	8001510 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002828:	f7fe fe72 	bl	8001510 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e160      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002846:	2001      	movs	r0, #1
 8002848:	f000 face 	bl	8002de8 <RCC_Delay>
 800284c:	e01c      	b.n	8002888 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_RCC_OscConfig+0x274>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7fe fe5c 	bl	8001510 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800285a:	e00f      	b.n	800287c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285c:	f7fe fe58 	bl	8001510 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d908      	bls.n	800287c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e146      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	42420000 	.word	0x42420000
 8002878:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	4b92      	ldr	r3, [pc, #584]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e9      	bne.n	800285c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80a6 	beq.w	80029e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289a:	4b8b      	ldr	r3, [pc, #556]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10d      	bne.n	80028c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	4b88      	ldr	r3, [pc, #544]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4a87      	ldr	r2, [pc, #540]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	61d3      	str	r3, [r2, #28]
 80028b2:	4b85      	ldr	r3, [pc, #532]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028be:	2301      	movs	r3, #1
 80028c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c2:	4b82      	ldr	r3, [pc, #520]	; (8002acc <HAL_RCC_OscConfig+0x4c8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d118      	bne.n	8002900 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ce:	4b7f      	ldr	r3, [pc, #508]	; (8002acc <HAL_RCC_OscConfig+0x4c8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a7e      	ldr	r2, [pc, #504]	; (8002acc <HAL_RCC_OscConfig+0x4c8>)
 80028d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028da:	f7fe fe19 	bl	8001510 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e2:	f7fe fe15 	bl	8001510 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b64      	cmp	r3, #100	; 0x64
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e103      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	4b75      	ldr	r3, [pc, #468]	; (8002acc <HAL_RCC_OscConfig+0x4c8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x312>
 8002908:	4b6f      	ldr	r3, [pc, #444]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4a6e      	ldr	r2, [pc, #440]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6213      	str	r3, [r2, #32]
 8002914:	e02d      	b.n	8002972 <HAL_RCC_OscConfig+0x36e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x334>
 800291e:	4b6a      	ldr	r3, [pc, #424]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4a69      	ldr	r2, [pc, #420]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	6213      	str	r3, [r2, #32]
 800292a:	4b67      	ldr	r3, [pc, #412]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	4a66      	ldr	r2, [pc, #408]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	f023 0304 	bic.w	r3, r3, #4
 8002934:	6213      	str	r3, [r2, #32]
 8002936:	e01c      	b.n	8002972 <HAL_RCC_OscConfig+0x36e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b05      	cmp	r3, #5
 800293e:	d10c      	bne.n	800295a <HAL_RCC_OscConfig+0x356>
 8002940:	4b61      	ldr	r3, [pc, #388]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4a60      	ldr	r2, [pc, #384]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002946:	f043 0304 	orr.w	r3, r3, #4
 800294a:	6213      	str	r3, [r2, #32]
 800294c:	4b5e      	ldr	r3, [pc, #376]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	4a5d      	ldr	r2, [pc, #372]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6213      	str	r3, [r2, #32]
 8002958:	e00b      	b.n	8002972 <HAL_RCC_OscConfig+0x36e>
 800295a:	4b5b      	ldr	r3, [pc, #364]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4a5a      	ldr	r2, [pc, #360]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	6213      	str	r3, [r2, #32]
 8002966:	4b58      	ldr	r3, [pc, #352]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4a57      	ldr	r2, [pc, #348]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	f023 0304 	bic.w	r3, r3, #4
 8002970:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d015      	beq.n	80029a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297a:	f7fe fdc9 	bl	8001510 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002980:	e00a      	b.n	8002998 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7fe fdc5 	bl	8001510 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002990:	4293      	cmp	r3, r2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e0b1      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002998:	4b4b      	ldr	r3, [pc, #300]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ee      	beq.n	8002982 <HAL_RCC_OscConfig+0x37e>
 80029a4:	e014      	b.n	80029d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a6:	f7fe fdb3 	bl	8001510 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ac:	e00a      	b.n	80029c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ae:	f7fe fdaf 	bl	8001510 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029bc:	4293      	cmp	r3, r2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e09b      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c4:	4b40      	ldr	r3, [pc, #256]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ee      	bne.n	80029ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d105      	bne.n	80029e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d6:	4b3c      	ldr	r3, [pc, #240]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	4a3b      	ldr	r2, [pc, #236]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8087 	beq.w	8002afa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ec:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d061      	beq.n	8002abc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d146      	bne.n	8002a8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a00:	4b33      	ldr	r3, [pc, #204]	; (8002ad0 <HAL_RCC_OscConfig+0x4cc>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7fe fd83 	bl	8001510 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7fe fd7f 	bl	8001510 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e06d      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a20:	4b29      	ldr	r3, [pc, #164]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f0      	bne.n	8002a0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a34:	d108      	bne.n	8002a48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a36:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	4921      	ldr	r1, [pc, #132]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a48:	4b1f      	ldr	r3, [pc, #124]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a19      	ldr	r1, [r3, #32]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	491b      	ldr	r1, [pc, #108]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_RCC_OscConfig+0x4cc>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fe fd53 	bl	8001510 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7fe fd4f 	bl	8001510 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e03d      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x46a>
 8002a8c:	e035      	b.n	8002afa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <HAL_RCC_OscConfig+0x4cc>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7fe fd3c 	bl	8001510 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe fd38 	bl	8001510 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e026      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x498>
 8002aba:	e01e      	b.n	8002afa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e019      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_OscConfig+0x500>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000

08002b08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0d0      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b6a      	ldr	r3, [pc, #424]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d910      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b67      	ldr	r3, [pc, #412]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 0207 	bic.w	r2, r3, #7
 8002b32:	4965      	ldr	r1, [pc, #404]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b63      	ldr	r3, [pc, #396]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0b8      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b64:	4b59      	ldr	r3, [pc, #356]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4a58      	ldr	r2, [pc, #352]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b7c:	4b53      	ldr	r3, [pc, #332]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4a52      	ldr	r2, [pc, #328]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b88:	4b50      	ldr	r3, [pc, #320]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	494d      	ldr	r1, [pc, #308]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d040      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b47      	ldr	r3, [pc, #284]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d115      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e07f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc6:	4b41      	ldr	r3, [pc, #260]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e073      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e06b      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be6:	4b39      	ldr	r3, [pc, #228]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f023 0203 	bic.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4936      	ldr	r1, [pc, #216]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fc8a 	bl	8001510 <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c00:	f7fe fc86 	bl	8001510 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e053      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 020c 	and.w	r2, r3, #12
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1eb      	bne.n	8002c00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c28:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d210      	bcs.n	8002c58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 0207 	bic.w	r2, r3, #7
 8002c3e:	4922      	ldr	r1, [pc, #136]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e032      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4916      	ldr	r1, [pc, #88]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c82:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	490e      	ldr	r1, [pc, #56]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c96:	f000 f821 	bl	8002cdc <HAL_RCC_GetSysClockFreq>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	490a      	ldr	r1, [pc, #40]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca8:	5ccb      	ldrb	r3, [r1, r3]
 8002caa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cae:	4a09      	ldr	r2, [pc, #36]	; (8002cd4 <HAL_RCC_ClockConfig+0x1cc>)
 8002cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_RCC_ClockConfig+0x1d0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fbe8 	bl	800148c <HAL_InitTick>

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40022000 	.word	0x40022000
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	08004ec0 	.word	0x08004ec0
 8002cd4:	20000034 	.word	0x20000034
 8002cd8:	20000038 	.word	0x20000038

08002cdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cf6:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d002      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x30>
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x36>
 8002d0a:	e027      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d0c:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d0e:	613b      	str	r3, [r7, #16]
      break;
 8002d10:	e027      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	0c9b      	lsrs	r3, r3, #18
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	4a17      	ldr	r2, [pc, #92]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d1c:	5cd3      	ldrb	r3, [r2, r3]
 8002d1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d010      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d2a:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	0c5b      	lsrs	r3, r3, #17
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	4a11      	ldr	r2, [pc, #68]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d36:	5cd3      	ldrb	r3, [r2, r3]
 8002d38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a0d      	ldr	r2, [pc, #52]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d3e:	fb03 f202 	mul.w	r2, r3, r2
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	e004      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	613b      	str	r3, [r7, #16]
      break;
 8002d5a:	e002      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d5e:	613b      	str	r3, [r7, #16]
      break;
 8002d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d62:	693b      	ldr	r3, [r7, #16]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	371c      	adds	r7, #28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	007a1200 	.word	0x007a1200
 8002d78:	08004ed8 	.word	0x08004ed8
 8002d7c:	08004ee8 	.word	0x08004ee8
 8002d80:	003d0900 	.word	0x003d0900

08002d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d88:	4b02      	ldr	r3, [pc, #8]	; (8002d94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr
 8002d94:	20000034 	.word	0x20000034

08002d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d9c:	f7ff fff2 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002da0:	4602      	mov	r2, r0
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	4903      	ldr	r1, [pc, #12]	; (8002dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dae:	5ccb      	ldrb	r3, [r1, r3]
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	08004ed0 	.word	0x08004ed0

08002dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dc4:	f7ff ffde 	bl	8002d84 <HAL_RCC_GetHCLKFreq>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	0adb      	lsrs	r3, r3, #11
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	4903      	ldr	r1, [pc, #12]	; (8002de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dd6:	5ccb      	ldrb	r3, [r1, r3]
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	08004ed0 	.word	0x08004ed0

08002de8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <RCC_Delay+0x34>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <RCC_Delay+0x38>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	0a5b      	lsrs	r3, r3, #9
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e04:	bf00      	nop
  }
  while (Delay --);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1e5a      	subs	r2, r3, #1
 8002e0a:	60fa      	str	r2, [r7, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f9      	bne.n	8002e04 <RCC_Delay+0x1c>
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	20000034 	.word	0x20000034
 8002e20:	10624dd3 	.word	0x10624dd3

08002e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e042      	b.n	8002ebc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d106      	bne.n	8002e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe f9b8 	bl	80011c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2224      	movs	r2, #36	; 0x24
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f91d 	bl	80030a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d16d      	bne.n	8002fc0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_UART_Transmit+0x2c>
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e066      	b.n	8002fc2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2221      	movs	r2, #33	; 0x21
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f02:	f7fe fb05 	bl	8001510 <HAL_GetTick>
 8002f06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	88fa      	ldrh	r2, [r7, #6]
 8002f0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	88fa      	ldrh	r2, [r7, #6]
 8002f12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f1c:	d108      	bne.n	8002f30 <HAL_UART_Transmit+0x6c>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d104      	bne.n	8002f30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	e003      	b.n	8002f38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f38:	e02a      	b.n	8002f90 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2200      	movs	r2, #0
 8002f42:	2180      	movs	r1, #128	; 0x80
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f840 	bl	8002fca <UART_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e036      	b.n	8002fc2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10b      	bne.n	8002f72 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	e007      	b.n	8002f82 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	781a      	ldrb	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1cf      	bne.n	8002f3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2140      	movs	r1, #64	; 0x40
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 f810 	bl	8002fca <UART_WaitOnFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e006      	b.n	8002fc2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	e000      	b.n	8002fc2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002fc0:	2302      	movs	r3, #2
  }
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3720      	adds	r7, #32
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b090      	sub	sp, #64	; 0x40
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	603b      	str	r3, [r7, #0]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fda:	e050      	b.n	800307e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fe2:	d04c      	beq.n	800307e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <UART_WaitOnFlagUntilTimeout+0x30>
 8002fea:	f7fe fa91 	bl	8001510 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d241      	bcs.n	800307e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	330c      	adds	r3, #12
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	e853 3f00 	ldrex	r3, [r3]
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003010:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	330c      	adds	r3, #12
 8003018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800301a:	637a      	str	r2, [r7, #52]	; 0x34
 800301c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003020:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003022:	e841 2300 	strex	r3, r2, [r1]
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1e5      	bne.n	8002ffa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3314      	adds	r3, #20
 8003034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	613b      	str	r3, [r7, #16]
   return(result);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	63bb      	str	r3, [r7, #56]	; 0x38
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3314      	adds	r3, #20
 800304c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800304e:	623a      	str	r2, [r7, #32]
 8003050:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003052:	69f9      	ldr	r1, [r7, #28]
 8003054:	6a3a      	ldr	r2, [r7, #32]
 8003056:	e841 2300 	strex	r3, r2, [r1]
 800305a:	61bb      	str	r3, [r7, #24]
   return(result);
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1e5      	bne.n	800302e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e00f      	b.n	800309e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4013      	ands	r3, r2
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	429a      	cmp	r2, r3
 800308c:	bf0c      	ite	eq
 800308e:	2301      	moveq	r3, #1
 8003090:	2300      	movne	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	429a      	cmp	r2, r3
 800309a:	d09f      	beq.n	8002fdc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3740      	adds	r7, #64	; 0x40
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030e2:	f023 030c 	bic.w	r3, r3, #12
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2c      	ldr	r2, [pc, #176]	; (80031bc <UART_SetConfig+0x114>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d103      	bne.n	8003118 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003110:	f7ff fe56 	bl	8002dc0 <HAL_RCC_GetPCLK2Freq>
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	e002      	b.n	800311e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003118:	f7ff fe3e 	bl	8002d98 <HAL_RCC_GetPCLK1Freq>
 800311c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	009a      	lsls	r2, r3, #2
 8003128:	441a      	add	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	4a22      	ldr	r2, [pc, #136]	; (80031c0 <UART_SetConfig+0x118>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	0119      	lsls	r1, r3, #4
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	009a      	lsls	r2, r3, #2
 8003148:	441a      	add	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	fbb2 f2f3 	udiv	r2, r2, r3
 8003154:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <UART_SetConfig+0x118>)
 8003156:	fba3 0302 	umull	r0, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2064      	movs	r0, #100	; 0x64
 800315e:	fb00 f303 	mul.w	r3, r0, r3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	3332      	adds	r3, #50	; 0x32
 8003168:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <UART_SetConfig+0x118>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003174:	4419      	add	r1, r3
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	009a      	lsls	r2, r3, #2
 8003180:	441a      	add	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	fbb2 f2f3 	udiv	r2, r2, r3
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <UART_SetConfig+0x118>)
 800318e:	fba3 0302 	umull	r0, r3, r3, r2
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	2064      	movs	r0, #100	; 0x64
 8003196:	fb00 f303 	mul.w	r3, r0, r3
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	3332      	adds	r3, #50	; 0x32
 80031a0:	4a07      	ldr	r2, [pc, #28]	; (80031c0 <UART_SetConfig+0x118>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	f003 020f 	and.w	r2, r3, #15
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	440a      	add	r2, r1
 80031b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031b4:	bf00      	nop
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40013800 	.word	0x40013800
 80031c0:	51eb851f 	.word	0x51eb851f

080031c4 <std>:
 80031c4:	2300      	movs	r3, #0
 80031c6:	b510      	push	{r4, lr}
 80031c8:	4604      	mov	r4, r0
 80031ca:	e9c0 3300 	strd	r3, r3, [r0]
 80031ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031d2:	6083      	str	r3, [r0, #8]
 80031d4:	8181      	strh	r1, [r0, #12]
 80031d6:	6643      	str	r3, [r0, #100]	; 0x64
 80031d8:	81c2      	strh	r2, [r0, #14]
 80031da:	6183      	str	r3, [r0, #24]
 80031dc:	4619      	mov	r1, r3
 80031de:	2208      	movs	r2, #8
 80031e0:	305c      	adds	r0, #92	; 0x5c
 80031e2:	f000 f906 	bl	80033f2 <memset>
 80031e6:	4b0d      	ldr	r3, [pc, #52]	; (800321c <std+0x58>)
 80031e8:	6224      	str	r4, [r4, #32]
 80031ea:	6263      	str	r3, [r4, #36]	; 0x24
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <std+0x5c>)
 80031ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <std+0x60>)
 80031f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <std+0x64>)
 80031f6:	6323      	str	r3, [r4, #48]	; 0x30
 80031f8:	4b0c      	ldr	r3, [pc, #48]	; (800322c <std+0x68>)
 80031fa:	429c      	cmp	r4, r3
 80031fc:	d006      	beq.n	800320c <std+0x48>
 80031fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003202:	4294      	cmp	r4, r2
 8003204:	d002      	beq.n	800320c <std+0x48>
 8003206:	33d0      	adds	r3, #208	; 0xd0
 8003208:	429c      	cmp	r4, r3
 800320a:	d105      	bne.n	8003218 <std+0x54>
 800320c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003214:	f000 b966 	b.w	80034e4 <__retarget_lock_init_recursive>
 8003218:	bd10      	pop	{r4, pc}
 800321a:	bf00      	nop
 800321c:	0800336d 	.word	0x0800336d
 8003220:	0800338f 	.word	0x0800338f
 8003224:	080033c7 	.word	0x080033c7
 8003228:	080033eb 	.word	0x080033eb
 800322c:	20000180 	.word	0x20000180

08003230 <stdio_exit_handler>:
 8003230:	4a02      	ldr	r2, [pc, #8]	; (800323c <stdio_exit_handler+0xc>)
 8003232:	4903      	ldr	r1, [pc, #12]	; (8003240 <stdio_exit_handler+0x10>)
 8003234:	4803      	ldr	r0, [pc, #12]	; (8003244 <stdio_exit_handler+0x14>)
 8003236:	f000 b869 	b.w	800330c <_fwalk_sglue>
 800323a:	bf00      	nop
 800323c:	20000040 	.word	0x20000040
 8003240:	08003d85 	.word	0x08003d85
 8003244:	2000004c 	.word	0x2000004c

08003248 <cleanup_stdio>:
 8003248:	6841      	ldr	r1, [r0, #4]
 800324a:	4b0c      	ldr	r3, [pc, #48]	; (800327c <cleanup_stdio+0x34>)
 800324c:	b510      	push	{r4, lr}
 800324e:	4299      	cmp	r1, r3
 8003250:	4604      	mov	r4, r0
 8003252:	d001      	beq.n	8003258 <cleanup_stdio+0x10>
 8003254:	f000 fd96 	bl	8003d84 <_fflush_r>
 8003258:	68a1      	ldr	r1, [r4, #8]
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <cleanup_stdio+0x38>)
 800325c:	4299      	cmp	r1, r3
 800325e:	d002      	beq.n	8003266 <cleanup_stdio+0x1e>
 8003260:	4620      	mov	r0, r4
 8003262:	f000 fd8f 	bl	8003d84 <_fflush_r>
 8003266:	68e1      	ldr	r1, [r4, #12]
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <cleanup_stdio+0x3c>)
 800326a:	4299      	cmp	r1, r3
 800326c:	d004      	beq.n	8003278 <cleanup_stdio+0x30>
 800326e:	4620      	mov	r0, r4
 8003270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003274:	f000 bd86 	b.w	8003d84 <_fflush_r>
 8003278:	bd10      	pop	{r4, pc}
 800327a:	bf00      	nop
 800327c:	20000180 	.word	0x20000180
 8003280:	200001e8 	.word	0x200001e8
 8003284:	20000250 	.word	0x20000250

08003288 <global_stdio_init.part.0>:
 8003288:	b510      	push	{r4, lr}
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <global_stdio_init.part.0+0x30>)
 800328c:	4c0b      	ldr	r4, [pc, #44]	; (80032bc <global_stdio_init.part.0+0x34>)
 800328e:	4a0c      	ldr	r2, [pc, #48]	; (80032c0 <global_stdio_init.part.0+0x38>)
 8003290:	4620      	mov	r0, r4
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	2104      	movs	r1, #4
 8003296:	2200      	movs	r2, #0
 8003298:	f7ff ff94 	bl	80031c4 <std>
 800329c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80032a0:	2201      	movs	r2, #1
 80032a2:	2109      	movs	r1, #9
 80032a4:	f7ff ff8e 	bl	80031c4 <std>
 80032a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80032ac:	2202      	movs	r2, #2
 80032ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032b2:	2112      	movs	r1, #18
 80032b4:	f7ff bf86 	b.w	80031c4 <std>
 80032b8:	200002b8 	.word	0x200002b8
 80032bc:	20000180 	.word	0x20000180
 80032c0:	08003231 	.word	0x08003231

080032c4 <__sfp_lock_acquire>:
 80032c4:	4801      	ldr	r0, [pc, #4]	; (80032cc <__sfp_lock_acquire+0x8>)
 80032c6:	f000 b90e 	b.w	80034e6 <__retarget_lock_acquire_recursive>
 80032ca:	bf00      	nop
 80032cc:	200002c1 	.word	0x200002c1

080032d0 <__sfp_lock_release>:
 80032d0:	4801      	ldr	r0, [pc, #4]	; (80032d8 <__sfp_lock_release+0x8>)
 80032d2:	f000 b909 	b.w	80034e8 <__retarget_lock_release_recursive>
 80032d6:	bf00      	nop
 80032d8:	200002c1 	.word	0x200002c1

080032dc <__sinit>:
 80032dc:	b510      	push	{r4, lr}
 80032de:	4604      	mov	r4, r0
 80032e0:	f7ff fff0 	bl	80032c4 <__sfp_lock_acquire>
 80032e4:	6a23      	ldr	r3, [r4, #32]
 80032e6:	b11b      	cbz	r3, 80032f0 <__sinit+0x14>
 80032e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032ec:	f7ff bff0 	b.w	80032d0 <__sfp_lock_release>
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <__sinit+0x28>)
 80032f2:	6223      	str	r3, [r4, #32]
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <__sinit+0x2c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f5      	bne.n	80032e8 <__sinit+0xc>
 80032fc:	f7ff ffc4 	bl	8003288 <global_stdio_init.part.0>
 8003300:	e7f2      	b.n	80032e8 <__sinit+0xc>
 8003302:	bf00      	nop
 8003304:	08003249 	.word	0x08003249
 8003308:	200002b8 	.word	0x200002b8

0800330c <_fwalk_sglue>:
 800330c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003310:	4607      	mov	r7, r0
 8003312:	4688      	mov	r8, r1
 8003314:	4614      	mov	r4, r2
 8003316:	2600      	movs	r6, #0
 8003318:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800331c:	f1b9 0901 	subs.w	r9, r9, #1
 8003320:	d505      	bpl.n	800332e <_fwalk_sglue+0x22>
 8003322:	6824      	ldr	r4, [r4, #0]
 8003324:	2c00      	cmp	r4, #0
 8003326:	d1f7      	bne.n	8003318 <_fwalk_sglue+0xc>
 8003328:	4630      	mov	r0, r6
 800332a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800332e:	89ab      	ldrh	r3, [r5, #12]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d907      	bls.n	8003344 <_fwalk_sglue+0x38>
 8003334:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003338:	3301      	adds	r3, #1
 800333a:	d003      	beq.n	8003344 <_fwalk_sglue+0x38>
 800333c:	4629      	mov	r1, r5
 800333e:	4638      	mov	r0, r7
 8003340:	47c0      	blx	r8
 8003342:	4306      	orrs	r6, r0
 8003344:	3568      	adds	r5, #104	; 0x68
 8003346:	e7e9      	b.n	800331c <_fwalk_sglue+0x10>

08003348 <iprintf>:
 8003348:	b40f      	push	{r0, r1, r2, r3}
 800334a:	b507      	push	{r0, r1, r2, lr}
 800334c:	4906      	ldr	r1, [pc, #24]	; (8003368 <iprintf+0x20>)
 800334e:	ab04      	add	r3, sp, #16
 8003350:	6808      	ldr	r0, [r1, #0]
 8003352:	f853 2b04 	ldr.w	r2, [r3], #4
 8003356:	6881      	ldr	r1, [r0, #8]
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	f000 f9e3 	bl	8003724 <_vfiprintf_r>
 800335e:	b003      	add	sp, #12
 8003360:	f85d eb04 	ldr.w	lr, [sp], #4
 8003364:	b004      	add	sp, #16
 8003366:	4770      	bx	lr
 8003368:	20000098 	.word	0x20000098

0800336c <__sread>:
 800336c:	b510      	push	{r4, lr}
 800336e:	460c      	mov	r4, r1
 8003370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003374:	f000 f868 	bl	8003448 <_read_r>
 8003378:	2800      	cmp	r0, #0
 800337a:	bfab      	itete	ge
 800337c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800337e:	89a3      	ldrhlt	r3, [r4, #12]
 8003380:	181b      	addge	r3, r3, r0
 8003382:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003386:	bfac      	ite	ge
 8003388:	6563      	strge	r3, [r4, #84]	; 0x54
 800338a:	81a3      	strhlt	r3, [r4, #12]
 800338c:	bd10      	pop	{r4, pc}

0800338e <__swrite>:
 800338e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003392:	461f      	mov	r7, r3
 8003394:	898b      	ldrh	r3, [r1, #12]
 8003396:	4605      	mov	r5, r0
 8003398:	05db      	lsls	r3, r3, #23
 800339a:	460c      	mov	r4, r1
 800339c:	4616      	mov	r6, r2
 800339e:	d505      	bpl.n	80033ac <__swrite+0x1e>
 80033a0:	2302      	movs	r3, #2
 80033a2:	2200      	movs	r2, #0
 80033a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033a8:	f000 f83c 	bl	8003424 <_lseek_r>
 80033ac:	89a3      	ldrh	r3, [r4, #12]
 80033ae:	4632      	mov	r2, r6
 80033b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033b4:	81a3      	strh	r3, [r4, #12]
 80033b6:	4628      	mov	r0, r5
 80033b8:	463b      	mov	r3, r7
 80033ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033c2:	f000 b853 	b.w	800346c <_write_r>

080033c6 <__sseek>:
 80033c6:	b510      	push	{r4, lr}
 80033c8:	460c      	mov	r4, r1
 80033ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033ce:	f000 f829 	bl	8003424 <_lseek_r>
 80033d2:	1c43      	adds	r3, r0, #1
 80033d4:	89a3      	ldrh	r3, [r4, #12]
 80033d6:	bf15      	itete	ne
 80033d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80033da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80033de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80033e2:	81a3      	strheq	r3, [r4, #12]
 80033e4:	bf18      	it	ne
 80033e6:	81a3      	strhne	r3, [r4, #12]
 80033e8:	bd10      	pop	{r4, pc}

080033ea <__sclose>:
 80033ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033ee:	f000 b809 	b.w	8003404 <_close_r>

080033f2 <memset>:
 80033f2:	4603      	mov	r3, r0
 80033f4:	4402      	add	r2, r0
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d100      	bne.n	80033fc <memset+0xa>
 80033fa:	4770      	bx	lr
 80033fc:	f803 1b01 	strb.w	r1, [r3], #1
 8003400:	e7f9      	b.n	80033f6 <memset+0x4>
	...

08003404 <_close_r>:
 8003404:	b538      	push	{r3, r4, r5, lr}
 8003406:	2300      	movs	r3, #0
 8003408:	4d05      	ldr	r5, [pc, #20]	; (8003420 <_close_r+0x1c>)
 800340a:	4604      	mov	r4, r0
 800340c:	4608      	mov	r0, r1
 800340e:	602b      	str	r3, [r5, #0]
 8003410:	f7fd ff93 	bl	800133a <_close>
 8003414:	1c43      	adds	r3, r0, #1
 8003416:	d102      	bne.n	800341e <_close_r+0x1a>
 8003418:	682b      	ldr	r3, [r5, #0]
 800341a:	b103      	cbz	r3, 800341e <_close_r+0x1a>
 800341c:	6023      	str	r3, [r4, #0]
 800341e:	bd38      	pop	{r3, r4, r5, pc}
 8003420:	200002bc 	.word	0x200002bc

08003424 <_lseek_r>:
 8003424:	b538      	push	{r3, r4, r5, lr}
 8003426:	4604      	mov	r4, r0
 8003428:	4608      	mov	r0, r1
 800342a:	4611      	mov	r1, r2
 800342c:	2200      	movs	r2, #0
 800342e:	4d05      	ldr	r5, [pc, #20]	; (8003444 <_lseek_r+0x20>)
 8003430:	602a      	str	r2, [r5, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	f7fd ffa5 	bl	8001382 <_lseek>
 8003438:	1c43      	adds	r3, r0, #1
 800343a:	d102      	bne.n	8003442 <_lseek_r+0x1e>
 800343c:	682b      	ldr	r3, [r5, #0]
 800343e:	b103      	cbz	r3, 8003442 <_lseek_r+0x1e>
 8003440:	6023      	str	r3, [r4, #0]
 8003442:	bd38      	pop	{r3, r4, r5, pc}
 8003444:	200002bc 	.word	0x200002bc

08003448 <_read_r>:
 8003448:	b538      	push	{r3, r4, r5, lr}
 800344a:	4604      	mov	r4, r0
 800344c:	4608      	mov	r0, r1
 800344e:	4611      	mov	r1, r2
 8003450:	2200      	movs	r2, #0
 8003452:	4d05      	ldr	r5, [pc, #20]	; (8003468 <_read_r+0x20>)
 8003454:	602a      	str	r2, [r5, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	f7fd ff36 	bl	80012c8 <_read>
 800345c:	1c43      	adds	r3, r0, #1
 800345e:	d102      	bne.n	8003466 <_read_r+0x1e>
 8003460:	682b      	ldr	r3, [r5, #0]
 8003462:	b103      	cbz	r3, 8003466 <_read_r+0x1e>
 8003464:	6023      	str	r3, [r4, #0]
 8003466:	bd38      	pop	{r3, r4, r5, pc}
 8003468:	200002bc 	.word	0x200002bc

0800346c <_write_r>:
 800346c:	b538      	push	{r3, r4, r5, lr}
 800346e:	4604      	mov	r4, r0
 8003470:	4608      	mov	r0, r1
 8003472:	4611      	mov	r1, r2
 8003474:	2200      	movs	r2, #0
 8003476:	4d05      	ldr	r5, [pc, #20]	; (800348c <_write_r+0x20>)
 8003478:	602a      	str	r2, [r5, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	f7fd ff41 	bl	8001302 <_write>
 8003480:	1c43      	adds	r3, r0, #1
 8003482:	d102      	bne.n	800348a <_write_r+0x1e>
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	b103      	cbz	r3, 800348a <_write_r+0x1e>
 8003488:	6023      	str	r3, [r4, #0]
 800348a:	bd38      	pop	{r3, r4, r5, pc}
 800348c:	200002bc 	.word	0x200002bc

08003490 <__errno>:
 8003490:	4b01      	ldr	r3, [pc, #4]	; (8003498 <__errno+0x8>)
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000098 	.word	0x20000098

0800349c <__libc_init_array>:
 800349c:	b570      	push	{r4, r5, r6, lr}
 800349e:	2600      	movs	r6, #0
 80034a0:	4d0c      	ldr	r5, [pc, #48]	; (80034d4 <__libc_init_array+0x38>)
 80034a2:	4c0d      	ldr	r4, [pc, #52]	; (80034d8 <__libc_init_array+0x3c>)
 80034a4:	1b64      	subs	r4, r4, r5
 80034a6:	10a4      	asrs	r4, r4, #2
 80034a8:	42a6      	cmp	r6, r4
 80034aa:	d109      	bne.n	80034c0 <__libc_init_array+0x24>
 80034ac:	f001 fcd2 	bl	8004e54 <_init>
 80034b0:	2600      	movs	r6, #0
 80034b2:	4d0a      	ldr	r5, [pc, #40]	; (80034dc <__libc_init_array+0x40>)
 80034b4:	4c0a      	ldr	r4, [pc, #40]	; (80034e0 <__libc_init_array+0x44>)
 80034b6:	1b64      	subs	r4, r4, r5
 80034b8:	10a4      	asrs	r4, r4, #2
 80034ba:	42a6      	cmp	r6, r4
 80034bc:	d105      	bne.n	80034ca <__libc_init_array+0x2e>
 80034be:	bd70      	pop	{r4, r5, r6, pc}
 80034c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034c4:	4798      	blx	r3
 80034c6:	3601      	adds	r6, #1
 80034c8:	e7ee      	b.n	80034a8 <__libc_init_array+0xc>
 80034ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ce:	4798      	blx	r3
 80034d0:	3601      	adds	r6, #1
 80034d2:	e7f2      	b.n	80034ba <__libc_init_array+0x1e>
 80034d4:	08004f50 	.word	0x08004f50
 80034d8:	08004f50 	.word	0x08004f50
 80034dc:	08004f50 	.word	0x08004f50
 80034e0:	08004f54 	.word	0x08004f54

080034e4 <__retarget_lock_init_recursive>:
 80034e4:	4770      	bx	lr

080034e6 <__retarget_lock_acquire_recursive>:
 80034e6:	4770      	bx	lr

080034e8 <__retarget_lock_release_recursive>:
 80034e8:	4770      	bx	lr
	...

080034ec <_free_r>:
 80034ec:	b538      	push	{r3, r4, r5, lr}
 80034ee:	4605      	mov	r5, r0
 80034f0:	2900      	cmp	r1, #0
 80034f2:	d040      	beq.n	8003576 <_free_r+0x8a>
 80034f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034f8:	1f0c      	subs	r4, r1, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bfb8      	it	lt
 80034fe:	18e4      	addlt	r4, r4, r3
 8003500:	f000 f8dc 	bl	80036bc <__malloc_lock>
 8003504:	4a1c      	ldr	r2, [pc, #112]	; (8003578 <_free_r+0x8c>)
 8003506:	6813      	ldr	r3, [r2, #0]
 8003508:	b933      	cbnz	r3, 8003518 <_free_r+0x2c>
 800350a:	6063      	str	r3, [r4, #4]
 800350c:	6014      	str	r4, [r2, #0]
 800350e:	4628      	mov	r0, r5
 8003510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003514:	f000 b8d8 	b.w	80036c8 <__malloc_unlock>
 8003518:	42a3      	cmp	r3, r4
 800351a:	d908      	bls.n	800352e <_free_r+0x42>
 800351c:	6820      	ldr	r0, [r4, #0]
 800351e:	1821      	adds	r1, r4, r0
 8003520:	428b      	cmp	r3, r1
 8003522:	bf01      	itttt	eq
 8003524:	6819      	ldreq	r1, [r3, #0]
 8003526:	685b      	ldreq	r3, [r3, #4]
 8003528:	1809      	addeq	r1, r1, r0
 800352a:	6021      	streq	r1, [r4, #0]
 800352c:	e7ed      	b.n	800350a <_free_r+0x1e>
 800352e:	461a      	mov	r2, r3
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	b10b      	cbz	r3, 8003538 <_free_r+0x4c>
 8003534:	42a3      	cmp	r3, r4
 8003536:	d9fa      	bls.n	800352e <_free_r+0x42>
 8003538:	6811      	ldr	r1, [r2, #0]
 800353a:	1850      	adds	r0, r2, r1
 800353c:	42a0      	cmp	r0, r4
 800353e:	d10b      	bne.n	8003558 <_free_r+0x6c>
 8003540:	6820      	ldr	r0, [r4, #0]
 8003542:	4401      	add	r1, r0
 8003544:	1850      	adds	r0, r2, r1
 8003546:	4283      	cmp	r3, r0
 8003548:	6011      	str	r1, [r2, #0]
 800354a:	d1e0      	bne.n	800350e <_free_r+0x22>
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	4408      	add	r0, r1
 8003552:	6010      	str	r0, [r2, #0]
 8003554:	6053      	str	r3, [r2, #4]
 8003556:	e7da      	b.n	800350e <_free_r+0x22>
 8003558:	d902      	bls.n	8003560 <_free_r+0x74>
 800355a:	230c      	movs	r3, #12
 800355c:	602b      	str	r3, [r5, #0]
 800355e:	e7d6      	b.n	800350e <_free_r+0x22>
 8003560:	6820      	ldr	r0, [r4, #0]
 8003562:	1821      	adds	r1, r4, r0
 8003564:	428b      	cmp	r3, r1
 8003566:	bf01      	itttt	eq
 8003568:	6819      	ldreq	r1, [r3, #0]
 800356a:	685b      	ldreq	r3, [r3, #4]
 800356c:	1809      	addeq	r1, r1, r0
 800356e:	6021      	streq	r1, [r4, #0]
 8003570:	6063      	str	r3, [r4, #4]
 8003572:	6054      	str	r4, [r2, #4]
 8003574:	e7cb      	b.n	800350e <_free_r+0x22>
 8003576:	bd38      	pop	{r3, r4, r5, pc}
 8003578:	200002c4 	.word	0x200002c4

0800357c <sbrk_aligned>:
 800357c:	b570      	push	{r4, r5, r6, lr}
 800357e:	4e0e      	ldr	r6, [pc, #56]	; (80035b8 <sbrk_aligned+0x3c>)
 8003580:	460c      	mov	r4, r1
 8003582:	6831      	ldr	r1, [r6, #0]
 8003584:	4605      	mov	r5, r0
 8003586:	b911      	cbnz	r1, 800358e <sbrk_aligned+0x12>
 8003588:	f000 fcba 	bl	8003f00 <_sbrk_r>
 800358c:	6030      	str	r0, [r6, #0]
 800358e:	4621      	mov	r1, r4
 8003590:	4628      	mov	r0, r5
 8003592:	f000 fcb5 	bl	8003f00 <_sbrk_r>
 8003596:	1c43      	adds	r3, r0, #1
 8003598:	d00a      	beq.n	80035b0 <sbrk_aligned+0x34>
 800359a:	1cc4      	adds	r4, r0, #3
 800359c:	f024 0403 	bic.w	r4, r4, #3
 80035a0:	42a0      	cmp	r0, r4
 80035a2:	d007      	beq.n	80035b4 <sbrk_aligned+0x38>
 80035a4:	1a21      	subs	r1, r4, r0
 80035a6:	4628      	mov	r0, r5
 80035a8:	f000 fcaa 	bl	8003f00 <_sbrk_r>
 80035ac:	3001      	adds	r0, #1
 80035ae:	d101      	bne.n	80035b4 <sbrk_aligned+0x38>
 80035b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80035b4:	4620      	mov	r0, r4
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	200002c8 	.word	0x200002c8

080035bc <_malloc_r>:
 80035bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035c0:	1ccd      	adds	r5, r1, #3
 80035c2:	f025 0503 	bic.w	r5, r5, #3
 80035c6:	3508      	adds	r5, #8
 80035c8:	2d0c      	cmp	r5, #12
 80035ca:	bf38      	it	cc
 80035cc:	250c      	movcc	r5, #12
 80035ce:	2d00      	cmp	r5, #0
 80035d0:	4607      	mov	r7, r0
 80035d2:	db01      	blt.n	80035d8 <_malloc_r+0x1c>
 80035d4:	42a9      	cmp	r1, r5
 80035d6:	d905      	bls.n	80035e4 <_malloc_r+0x28>
 80035d8:	230c      	movs	r3, #12
 80035da:	2600      	movs	r6, #0
 80035dc:	603b      	str	r3, [r7, #0]
 80035de:	4630      	mov	r0, r6
 80035e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80036b8 <_malloc_r+0xfc>
 80035e8:	f000 f868 	bl	80036bc <__malloc_lock>
 80035ec:	f8d8 3000 	ldr.w	r3, [r8]
 80035f0:	461c      	mov	r4, r3
 80035f2:	bb5c      	cbnz	r4, 800364c <_malloc_r+0x90>
 80035f4:	4629      	mov	r1, r5
 80035f6:	4638      	mov	r0, r7
 80035f8:	f7ff ffc0 	bl	800357c <sbrk_aligned>
 80035fc:	1c43      	adds	r3, r0, #1
 80035fe:	4604      	mov	r4, r0
 8003600:	d155      	bne.n	80036ae <_malloc_r+0xf2>
 8003602:	f8d8 4000 	ldr.w	r4, [r8]
 8003606:	4626      	mov	r6, r4
 8003608:	2e00      	cmp	r6, #0
 800360a:	d145      	bne.n	8003698 <_malloc_r+0xdc>
 800360c:	2c00      	cmp	r4, #0
 800360e:	d048      	beq.n	80036a2 <_malloc_r+0xe6>
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	4631      	mov	r1, r6
 8003614:	4638      	mov	r0, r7
 8003616:	eb04 0903 	add.w	r9, r4, r3
 800361a:	f000 fc71 	bl	8003f00 <_sbrk_r>
 800361e:	4581      	cmp	r9, r0
 8003620:	d13f      	bne.n	80036a2 <_malloc_r+0xe6>
 8003622:	6821      	ldr	r1, [r4, #0]
 8003624:	4638      	mov	r0, r7
 8003626:	1a6d      	subs	r5, r5, r1
 8003628:	4629      	mov	r1, r5
 800362a:	f7ff ffa7 	bl	800357c <sbrk_aligned>
 800362e:	3001      	adds	r0, #1
 8003630:	d037      	beq.n	80036a2 <_malloc_r+0xe6>
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	442b      	add	r3, r5
 8003636:	6023      	str	r3, [r4, #0]
 8003638:	f8d8 3000 	ldr.w	r3, [r8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d038      	beq.n	80036b2 <_malloc_r+0xf6>
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	42a2      	cmp	r2, r4
 8003644:	d12b      	bne.n	800369e <_malloc_r+0xe2>
 8003646:	2200      	movs	r2, #0
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	e00f      	b.n	800366c <_malloc_r+0xb0>
 800364c:	6822      	ldr	r2, [r4, #0]
 800364e:	1b52      	subs	r2, r2, r5
 8003650:	d41f      	bmi.n	8003692 <_malloc_r+0xd6>
 8003652:	2a0b      	cmp	r2, #11
 8003654:	d917      	bls.n	8003686 <_malloc_r+0xca>
 8003656:	1961      	adds	r1, r4, r5
 8003658:	42a3      	cmp	r3, r4
 800365a:	6025      	str	r5, [r4, #0]
 800365c:	bf18      	it	ne
 800365e:	6059      	strne	r1, [r3, #4]
 8003660:	6863      	ldr	r3, [r4, #4]
 8003662:	bf08      	it	eq
 8003664:	f8c8 1000 	streq.w	r1, [r8]
 8003668:	5162      	str	r2, [r4, r5]
 800366a:	604b      	str	r3, [r1, #4]
 800366c:	4638      	mov	r0, r7
 800366e:	f104 060b 	add.w	r6, r4, #11
 8003672:	f000 f829 	bl	80036c8 <__malloc_unlock>
 8003676:	f026 0607 	bic.w	r6, r6, #7
 800367a:	1d23      	adds	r3, r4, #4
 800367c:	1af2      	subs	r2, r6, r3
 800367e:	d0ae      	beq.n	80035de <_malloc_r+0x22>
 8003680:	1b9b      	subs	r3, r3, r6
 8003682:	50a3      	str	r3, [r4, r2]
 8003684:	e7ab      	b.n	80035de <_malloc_r+0x22>
 8003686:	42a3      	cmp	r3, r4
 8003688:	6862      	ldr	r2, [r4, #4]
 800368a:	d1dd      	bne.n	8003648 <_malloc_r+0x8c>
 800368c:	f8c8 2000 	str.w	r2, [r8]
 8003690:	e7ec      	b.n	800366c <_malloc_r+0xb0>
 8003692:	4623      	mov	r3, r4
 8003694:	6864      	ldr	r4, [r4, #4]
 8003696:	e7ac      	b.n	80035f2 <_malloc_r+0x36>
 8003698:	4634      	mov	r4, r6
 800369a:	6876      	ldr	r6, [r6, #4]
 800369c:	e7b4      	b.n	8003608 <_malloc_r+0x4c>
 800369e:	4613      	mov	r3, r2
 80036a0:	e7cc      	b.n	800363c <_malloc_r+0x80>
 80036a2:	230c      	movs	r3, #12
 80036a4:	4638      	mov	r0, r7
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	f000 f80e 	bl	80036c8 <__malloc_unlock>
 80036ac:	e797      	b.n	80035de <_malloc_r+0x22>
 80036ae:	6025      	str	r5, [r4, #0]
 80036b0:	e7dc      	b.n	800366c <_malloc_r+0xb0>
 80036b2:	605b      	str	r3, [r3, #4]
 80036b4:	deff      	udf	#255	; 0xff
 80036b6:	bf00      	nop
 80036b8:	200002c4 	.word	0x200002c4

080036bc <__malloc_lock>:
 80036bc:	4801      	ldr	r0, [pc, #4]	; (80036c4 <__malloc_lock+0x8>)
 80036be:	f7ff bf12 	b.w	80034e6 <__retarget_lock_acquire_recursive>
 80036c2:	bf00      	nop
 80036c4:	200002c0 	.word	0x200002c0

080036c8 <__malloc_unlock>:
 80036c8:	4801      	ldr	r0, [pc, #4]	; (80036d0 <__malloc_unlock+0x8>)
 80036ca:	f7ff bf0d 	b.w	80034e8 <__retarget_lock_release_recursive>
 80036ce:	bf00      	nop
 80036d0:	200002c0 	.word	0x200002c0

080036d4 <__sfputc_r>:
 80036d4:	6893      	ldr	r3, [r2, #8]
 80036d6:	b410      	push	{r4}
 80036d8:	3b01      	subs	r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	6093      	str	r3, [r2, #8]
 80036de:	da07      	bge.n	80036f0 <__sfputc_r+0x1c>
 80036e0:	6994      	ldr	r4, [r2, #24]
 80036e2:	42a3      	cmp	r3, r4
 80036e4:	db01      	blt.n	80036ea <__sfputc_r+0x16>
 80036e6:	290a      	cmp	r1, #10
 80036e8:	d102      	bne.n	80036f0 <__sfputc_r+0x1c>
 80036ea:	bc10      	pop	{r4}
 80036ec:	f000 bb72 	b.w	8003dd4 <__swbuf_r>
 80036f0:	6813      	ldr	r3, [r2, #0]
 80036f2:	1c58      	adds	r0, r3, #1
 80036f4:	6010      	str	r0, [r2, #0]
 80036f6:	7019      	strb	r1, [r3, #0]
 80036f8:	4608      	mov	r0, r1
 80036fa:	bc10      	pop	{r4}
 80036fc:	4770      	bx	lr

080036fe <__sfputs_r>:
 80036fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003700:	4606      	mov	r6, r0
 8003702:	460f      	mov	r7, r1
 8003704:	4614      	mov	r4, r2
 8003706:	18d5      	adds	r5, r2, r3
 8003708:	42ac      	cmp	r4, r5
 800370a:	d101      	bne.n	8003710 <__sfputs_r+0x12>
 800370c:	2000      	movs	r0, #0
 800370e:	e007      	b.n	8003720 <__sfputs_r+0x22>
 8003710:	463a      	mov	r2, r7
 8003712:	4630      	mov	r0, r6
 8003714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003718:	f7ff ffdc 	bl	80036d4 <__sfputc_r>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d1f3      	bne.n	8003708 <__sfputs_r+0xa>
 8003720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003724 <_vfiprintf_r>:
 8003724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003728:	460d      	mov	r5, r1
 800372a:	4614      	mov	r4, r2
 800372c:	4698      	mov	r8, r3
 800372e:	4606      	mov	r6, r0
 8003730:	b09d      	sub	sp, #116	; 0x74
 8003732:	b118      	cbz	r0, 800373c <_vfiprintf_r+0x18>
 8003734:	6a03      	ldr	r3, [r0, #32]
 8003736:	b90b      	cbnz	r3, 800373c <_vfiprintf_r+0x18>
 8003738:	f7ff fdd0 	bl	80032dc <__sinit>
 800373c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800373e:	07d9      	lsls	r1, r3, #31
 8003740:	d405      	bmi.n	800374e <_vfiprintf_r+0x2a>
 8003742:	89ab      	ldrh	r3, [r5, #12]
 8003744:	059a      	lsls	r2, r3, #22
 8003746:	d402      	bmi.n	800374e <_vfiprintf_r+0x2a>
 8003748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800374a:	f7ff fecc 	bl	80034e6 <__retarget_lock_acquire_recursive>
 800374e:	89ab      	ldrh	r3, [r5, #12]
 8003750:	071b      	lsls	r3, r3, #28
 8003752:	d501      	bpl.n	8003758 <_vfiprintf_r+0x34>
 8003754:	692b      	ldr	r3, [r5, #16]
 8003756:	b99b      	cbnz	r3, 8003780 <_vfiprintf_r+0x5c>
 8003758:	4629      	mov	r1, r5
 800375a:	4630      	mov	r0, r6
 800375c:	f000 fb78 	bl	8003e50 <__swsetup_r>
 8003760:	b170      	cbz	r0, 8003780 <_vfiprintf_r+0x5c>
 8003762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003764:	07dc      	lsls	r4, r3, #31
 8003766:	d504      	bpl.n	8003772 <_vfiprintf_r+0x4e>
 8003768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800376c:	b01d      	add	sp, #116	; 0x74
 800376e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003772:	89ab      	ldrh	r3, [r5, #12]
 8003774:	0598      	lsls	r0, r3, #22
 8003776:	d4f7      	bmi.n	8003768 <_vfiprintf_r+0x44>
 8003778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800377a:	f7ff feb5 	bl	80034e8 <__retarget_lock_release_recursive>
 800377e:	e7f3      	b.n	8003768 <_vfiprintf_r+0x44>
 8003780:	2300      	movs	r3, #0
 8003782:	9309      	str	r3, [sp, #36]	; 0x24
 8003784:	2320      	movs	r3, #32
 8003786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800378a:	2330      	movs	r3, #48	; 0x30
 800378c:	f04f 0901 	mov.w	r9, #1
 8003790:	f8cd 800c 	str.w	r8, [sp, #12]
 8003794:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003944 <_vfiprintf_r+0x220>
 8003798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800379c:	4623      	mov	r3, r4
 800379e:	469a      	mov	sl, r3
 80037a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037a4:	b10a      	cbz	r2, 80037aa <_vfiprintf_r+0x86>
 80037a6:	2a25      	cmp	r2, #37	; 0x25
 80037a8:	d1f9      	bne.n	800379e <_vfiprintf_r+0x7a>
 80037aa:	ebba 0b04 	subs.w	fp, sl, r4
 80037ae:	d00b      	beq.n	80037c8 <_vfiprintf_r+0xa4>
 80037b0:	465b      	mov	r3, fp
 80037b2:	4622      	mov	r2, r4
 80037b4:	4629      	mov	r1, r5
 80037b6:	4630      	mov	r0, r6
 80037b8:	f7ff ffa1 	bl	80036fe <__sfputs_r>
 80037bc:	3001      	adds	r0, #1
 80037be:	f000 80a9 	beq.w	8003914 <_vfiprintf_r+0x1f0>
 80037c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037c4:	445a      	add	r2, fp
 80037c6:	9209      	str	r2, [sp, #36]	; 0x24
 80037c8:	f89a 3000 	ldrb.w	r3, [sl]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80a1 	beq.w	8003914 <_vfiprintf_r+0x1f0>
 80037d2:	2300      	movs	r3, #0
 80037d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037dc:	f10a 0a01 	add.w	sl, sl, #1
 80037e0:	9304      	str	r3, [sp, #16]
 80037e2:	9307      	str	r3, [sp, #28]
 80037e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037e8:	931a      	str	r3, [sp, #104]	; 0x68
 80037ea:	4654      	mov	r4, sl
 80037ec:	2205      	movs	r2, #5
 80037ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037f2:	4854      	ldr	r0, [pc, #336]	; (8003944 <_vfiprintf_r+0x220>)
 80037f4:	f000 fb94 	bl	8003f20 <memchr>
 80037f8:	9a04      	ldr	r2, [sp, #16]
 80037fa:	b9d8      	cbnz	r0, 8003834 <_vfiprintf_r+0x110>
 80037fc:	06d1      	lsls	r1, r2, #27
 80037fe:	bf44      	itt	mi
 8003800:	2320      	movmi	r3, #32
 8003802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003806:	0713      	lsls	r3, r2, #28
 8003808:	bf44      	itt	mi
 800380a:	232b      	movmi	r3, #43	; 0x2b
 800380c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003810:	f89a 3000 	ldrb.w	r3, [sl]
 8003814:	2b2a      	cmp	r3, #42	; 0x2a
 8003816:	d015      	beq.n	8003844 <_vfiprintf_r+0x120>
 8003818:	4654      	mov	r4, sl
 800381a:	2000      	movs	r0, #0
 800381c:	f04f 0c0a 	mov.w	ip, #10
 8003820:	9a07      	ldr	r2, [sp, #28]
 8003822:	4621      	mov	r1, r4
 8003824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003828:	3b30      	subs	r3, #48	; 0x30
 800382a:	2b09      	cmp	r3, #9
 800382c:	d94d      	bls.n	80038ca <_vfiprintf_r+0x1a6>
 800382e:	b1b0      	cbz	r0, 800385e <_vfiprintf_r+0x13a>
 8003830:	9207      	str	r2, [sp, #28]
 8003832:	e014      	b.n	800385e <_vfiprintf_r+0x13a>
 8003834:	eba0 0308 	sub.w	r3, r0, r8
 8003838:	fa09 f303 	lsl.w	r3, r9, r3
 800383c:	4313      	orrs	r3, r2
 800383e:	46a2      	mov	sl, r4
 8003840:	9304      	str	r3, [sp, #16]
 8003842:	e7d2      	b.n	80037ea <_vfiprintf_r+0xc6>
 8003844:	9b03      	ldr	r3, [sp, #12]
 8003846:	1d19      	adds	r1, r3, #4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	9103      	str	r1, [sp, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	bfbb      	ittet	lt
 8003850:	425b      	neglt	r3, r3
 8003852:	f042 0202 	orrlt.w	r2, r2, #2
 8003856:	9307      	strge	r3, [sp, #28]
 8003858:	9307      	strlt	r3, [sp, #28]
 800385a:	bfb8      	it	lt
 800385c:	9204      	strlt	r2, [sp, #16]
 800385e:	7823      	ldrb	r3, [r4, #0]
 8003860:	2b2e      	cmp	r3, #46	; 0x2e
 8003862:	d10c      	bne.n	800387e <_vfiprintf_r+0x15a>
 8003864:	7863      	ldrb	r3, [r4, #1]
 8003866:	2b2a      	cmp	r3, #42	; 0x2a
 8003868:	d134      	bne.n	80038d4 <_vfiprintf_r+0x1b0>
 800386a:	9b03      	ldr	r3, [sp, #12]
 800386c:	3402      	adds	r4, #2
 800386e:	1d1a      	adds	r2, r3, #4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	9203      	str	r2, [sp, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	bfb8      	it	lt
 8003878:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800387c:	9305      	str	r3, [sp, #20]
 800387e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003948 <_vfiprintf_r+0x224>
 8003882:	2203      	movs	r2, #3
 8003884:	4650      	mov	r0, sl
 8003886:	7821      	ldrb	r1, [r4, #0]
 8003888:	f000 fb4a 	bl	8003f20 <memchr>
 800388c:	b138      	cbz	r0, 800389e <_vfiprintf_r+0x17a>
 800388e:	2240      	movs	r2, #64	; 0x40
 8003890:	9b04      	ldr	r3, [sp, #16]
 8003892:	eba0 000a 	sub.w	r0, r0, sl
 8003896:	4082      	lsls	r2, r0
 8003898:	4313      	orrs	r3, r2
 800389a:	3401      	adds	r4, #1
 800389c:	9304      	str	r3, [sp, #16]
 800389e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038a2:	2206      	movs	r2, #6
 80038a4:	4829      	ldr	r0, [pc, #164]	; (800394c <_vfiprintf_r+0x228>)
 80038a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038aa:	f000 fb39 	bl	8003f20 <memchr>
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d03f      	beq.n	8003932 <_vfiprintf_r+0x20e>
 80038b2:	4b27      	ldr	r3, [pc, #156]	; (8003950 <_vfiprintf_r+0x22c>)
 80038b4:	bb1b      	cbnz	r3, 80038fe <_vfiprintf_r+0x1da>
 80038b6:	9b03      	ldr	r3, [sp, #12]
 80038b8:	3307      	adds	r3, #7
 80038ba:	f023 0307 	bic.w	r3, r3, #7
 80038be:	3308      	adds	r3, #8
 80038c0:	9303      	str	r3, [sp, #12]
 80038c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038c4:	443b      	add	r3, r7
 80038c6:	9309      	str	r3, [sp, #36]	; 0x24
 80038c8:	e768      	b.n	800379c <_vfiprintf_r+0x78>
 80038ca:	460c      	mov	r4, r1
 80038cc:	2001      	movs	r0, #1
 80038ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80038d2:	e7a6      	b.n	8003822 <_vfiprintf_r+0xfe>
 80038d4:	2300      	movs	r3, #0
 80038d6:	f04f 0c0a 	mov.w	ip, #10
 80038da:	4619      	mov	r1, r3
 80038dc:	3401      	adds	r4, #1
 80038de:	9305      	str	r3, [sp, #20]
 80038e0:	4620      	mov	r0, r4
 80038e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038e6:	3a30      	subs	r2, #48	; 0x30
 80038e8:	2a09      	cmp	r2, #9
 80038ea:	d903      	bls.n	80038f4 <_vfiprintf_r+0x1d0>
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0c6      	beq.n	800387e <_vfiprintf_r+0x15a>
 80038f0:	9105      	str	r1, [sp, #20]
 80038f2:	e7c4      	b.n	800387e <_vfiprintf_r+0x15a>
 80038f4:	4604      	mov	r4, r0
 80038f6:	2301      	movs	r3, #1
 80038f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80038fc:	e7f0      	b.n	80038e0 <_vfiprintf_r+0x1bc>
 80038fe:	ab03      	add	r3, sp, #12
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	462a      	mov	r2, r5
 8003904:	4630      	mov	r0, r6
 8003906:	4b13      	ldr	r3, [pc, #76]	; (8003954 <_vfiprintf_r+0x230>)
 8003908:	a904      	add	r1, sp, #16
 800390a:	f3af 8000 	nop.w
 800390e:	4607      	mov	r7, r0
 8003910:	1c78      	adds	r0, r7, #1
 8003912:	d1d6      	bne.n	80038c2 <_vfiprintf_r+0x19e>
 8003914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003916:	07d9      	lsls	r1, r3, #31
 8003918:	d405      	bmi.n	8003926 <_vfiprintf_r+0x202>
 800391a:	89ab      	ldrh	r3, [r5, #12]
 800391c:	059a      	lsls	r2, r3, #22
 800391e:	d402      	bmi.n	8003926 <_vfiprintf_r+0x202>
 8003920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003922:	f7ff fde1 	bl	80034e8 <__retarget_lock_release_recursive>
 8003926:	89ab      	ldrh	r3, [r5, #12]
 8003928:	065b      	lsls	r3, r3, #25
 800392a:	f53f af1d 	bmi.w	8003768 <_vfiprintf_r+0x44>
 800392e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003930:	e71c      	b.n	800376c <_vfiprintf_r+0x48>
 8003932:	ab03      	add	r3, sp, #12
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	462a      	mov	r2, r5
 8003938:	4630      	mov	r0, r6
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <_vfiprintf_r+0x230>)
 800393c:	a904      	add	r1, sp, #16
 800393e:	f000 f87d 	bl	8003a3c <_printf_i>
 8003942:	e7e4      	b.n	800390e <_vfiprintf_r+0x1ea>
 8003944:	08004eea 	.word	0x08004eea
 8003948:	08004ef0 	.word	0x08004ef0
 800394c:	08004ef4 	.word	0x08004ef4
 8003950:	00000000 	.word	0x00000000
 8003954:	080036ff 	.word	0x080036ff

08003958 <_printf_common>:
 8003958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800395c:	4616      	mov	r6, r2
 800395e:	4699      	mov	r9, r3
 8003960:	688a      	ldr	r2, [r1, #8]
 8003962:	690b      	ldr	r3, [r1, #16]
 8003964:	4607      	mov	r7, r0
 8003966:	4293      	cmp	r3, r2
 8003968:	bfb8      	it	lt
 800396a:	4613      	movlt	r3, r2
 800396c:	6033      	str	r3, [r6, #0]
 800396e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003972:	460c      	mov	r4, r1
 8003974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003978:	b10a      	cbz	r2, 800397e <_printf_common+0x26>
 800397a:	3301      	adds	r3, #1
 800397c:	6033      	str	r3, [r6, #0]
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	0699      	lsls	r1, r3, #26
 8003982:	bf42      	ittt	mi
 8003984:	6833      	ldrmi	r3, [r6, #0]
 8003986:	3302      	addmi	r3, #2
 8003988:	6033      	strmi	r3, [r6, #0]
 800398a:	6825      	ldr	r5, [r4, #0]
 800398c:	f015 0506 	ands.w	r5, r5, #6
 8003990:	d106      	bne.n	80039a0 <_printf_common+0x48>
 8003992:	f104 0a19 	add.w	sl, r4, #25
 8003996:	68e3      	ldr	r3, [r4, #12]
 8003998:	6832      	ldr	r2, [r6, #0]
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	42ab      	cmp	r3, r5
 800399e:	dc2b      	bgt.n	80039f8 <_printf_common+0xa0>
 80039a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039a4:	1e13      	subs	r3, r2, #0
 80039a6:	6822      	ldr	r2, [r4, #0]
 80039a8:	bf18      	it	ne
 80039aa:	2301      	movne	r3, #1
 80039ac:	0692      	lsls	r2, r2, #26
 80039ae:	d430      	bmi.n	8003a12 <_printf_common+0xba>
 80039b0:	4649      	mov	r1, r9
 80039b2:	4638      	mov	r0, r7
 80039b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039b8:	47c0      	blx	r8
 80039ba:	3001      	adds	r0, #1
 80039bc:	d023      	beq.n	8003a06 <_printf_common+0xae>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	6922      	ldr	r2, [r4, #16]
 80039c2:	f003 0306 	and.w	r3, r3, #6
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	bf14      	ite	ne
 80039ca:	2500      	movne	r5, #0
 80039cc:	6833      	ldreq	r3, [r6, #0]
 80039ce:	f04f 0600 	mov.w	r6, #0
 80039d2:	bf08      	it	eq
 80039d4:	68e5      	ldreq	r5, [r4, #12]
 80039d6:	f104 041a 	add.w	r4, r4, #26
 80039da:	bf08      	it	eq
 80039dc:	1aed      	subeq	r5, r5, r3
 80039de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80039e2:	bf08      	it	eq
 80039e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039e8:	4293      	cmp	r3, r2
 80039ea:	bfc4      	itt	gt
 80039ec:	1a9b      	subgt	r3, r3, r2
 80039ee:	18ed      	addgt	r5, r5, r3
 80039f0:	42b5      	cmp	r5, r6
 80039f2:	d11a      	bne.n	8003a2a <_printf_common+0xd2>
 80039f4:	2000      	movs	r0, #0
 80039f6:	e008      	b.n	8003a0a <_printf_common+0xb2>
 80039f8:	2301      	movs	r3, #1
 80039fa:	4652      	mov	r2, sl
 80039fc:	4649      	mov	r1, r9
 80039fe:	4638      	mov	r0, r7
 8003a00:	47c0      	blx	r8
 8003a02:	3001      	adds	r0, #1
 8003a04:	d103      	bne.n	8003a0e <_printf_common+0xb6>
 8003a06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a0e:	3501      	adds	r5, #1
 8003a10:	e7c1      	b.n	8003996 <_printf_common+0x3e>
 8003a12:	2030      	movs	r0, #48	; 0x30
 8003a14:	18e1      	adds	r1, r4, r3
 8003a16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a20:	4422      	add	r2, r4
 8003a22:	3302      	adds	r3, #2
 8003a24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a28:	e7c2      	b.n	80039b0 <_printf_common+0x58>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	4622      	mov	r2, r4
 8003a2e:	4649      	mov	r1, r9
 8003a30:	4638      	mov	r0, r7
 8003a32:	47c0      	blx	r8
 8003a34:	3001      	adds	r0, #1
 8003a36:	d0e6      	beq.n	8003a06 <_printf_common+0xae>
 8003a38:	3601      	adds	r6, #1
 8003a3a:	e7d9      	b.n	80039f0 <_printf_common+0x98>

08003a3c <_printf_i>:
 8003a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a40:	7e0f      	ldrb	r7, [r1, #24]
 8003a42:	4691      	mov	r9, r2
 8003a44:	2f78      	cmp	r7, #120	; 0x78
 8003a46:	4680      	mov	r8, r0
 8003a48:	460c      	mov	r4, r1
 8003a4a:	469a      	mov	sl, r3
 8003a4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a52:	d807      	bhi.n	8003a64 <_printf_i+0x28>
 8003a54:	2f62      	cmp	r7, #98	; 0x62
 8003a56:	d80a      	bhi.n	8003a6e <_printf_i+0x32>
 8003a58:	2f00      	cmp	r7, #0
 8003a5a:	f000 80d5 	beq.w	8003c08 <_printf_i+0x1cc>
 8003a5e:	2f58      	cmp	r7, #88	; 0x58
 8003a60:	f000 80c1 	beq.w	8003be6 <_printf_i+0x1aa>
 8003a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a6c:	e03a      	b.n	8003ae4 <_printf_i+0xa8>
 8003a6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a72:	2b15      	cmp	r3, #21
 8003a74:	d8f6      	bhi.n	8003a64 <_printf_i+0x28>
 8003a76:	a101      	add	r1, pc, #4	; (adr r1, 8003a7c <_printf_i+0x40>)
 8003a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a7c:	08003ad5 	.word	0x08003ad5
 8003a80:	08003ae9 	.word	0x08003ae9
 8003a84:	08003a65 	.word	0x08003a65
 8003a88:	08003a65 	.word	0x08003a65
 8003a8c:	08003a65 	.word	0x08003a65
 8003a90:	08003a65 	.word	0x08003a65
 8003a94:	08003ae9 	.word	0x08003ae9
 8003a98:	08003a65 	.word	0x08003a65
 8003a9c:	08003a65 	.word	0x08003a65
 8003aa0:	08003a65 	.word	0x08003a65
 8003aa4:	08003a65 	.word	0x08003a65
 8003aa8:	08003bef 	.word	0x08003bef
 8003aac:	08003b15 	.word	0x08003b15
 8003ab0:	08003ba9 	.word	0x08003ba9
 8003ab4:	08003a65 	.word	0x08003a65
 8003ab8:	08003a65 	.word	0x08003a65
 8003abc:	08003c11 	.word	0x08003c11
 8003ac0:	08003a65 	.word	0x08003a65
 8003ac4:	08003b15 	.word	0x08003b15
 8003ac8:	08003a65 	.word	0x08003a65
 8003acc:	08003a65 	.word	0x08003a65
 8003ad0:	08003bb1 	.word	0x08003bb1
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	1d1a      	adds	r2, r3, #4
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	602a      	str	r2, [r5, #0]
 8003adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0a0      	b.n	8003c2a <_printf_i+0x1ee>
 8003ae8:	6820      	ldr	r0, [r4, #0]
 8003aea:	682b      	ldr	r3, [r5, #0]
 8003aec:	0607      	lsls	r7, r0, #24
 8003aee:	f103 0104 	add.w	r1, r3, #4
 8003af2:	6029      	str	r1, [r5, #0]
 8003af4:	d501      	bpl.n	8003afa <_printf_i+0xbe>
 8003af6:	681e      	ldr	r6, [r3, #0]
 8003af8:	e003      	b.n	8003b02 <_printf_i+0xc6>
 8003afa:	0646      	lsls	r6, r0, #25
 8003afc:	d5fb      	bpl.n	8003af6 <_printf_i+0xba>
 8003afe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003b02:	2e00      	cmp	r6, #0
 8003b04:	da03      	bge.n	8003b0e <_printf_i+0xd2>
 8003b06:	232d      	movs	r3, #45	; 0x2d
 8003b08:	4276      	negs	r6, r6
 8003b0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b0e:	230a      	movs	r3, #10
 8003b10:	4859      	ldr	r0, [pc, #356]	; (8003c78 <_printf_i+0x23c>)
 8003b12:	e012      	b.n	8003b3a <_printf_i+0xfe>
 8003b14:	682b      	ldr	r3, [r5, #0]
 8003b16:	6820      	ldr	r0, [r4, #0]
 8003b18:	1d19      	adds	r1, r3, #4
 8003b1a:	6029      	str	r1, [r5, #0]
 8003b1c:	0605      	lsls	r5, r0, #24
 8003b1e:	d501      	bpl.n	8003b24 <_printf_i+0xe8>
 8003b20:	681e      	ldr	r6, [r3, #0]
 8003b22:	e002      	b.n	8003b2a <_printf_i+0xee>
 8003b24:	0641      	lsls	r1, r0, #25
 8003b26:	d5fb      	bpl.n	8003b20 <_printf_i+0xe4>
 8003b28:	881e      	ldrh	r6, [r3, #0]
 8003b2a:	2f6f      	cmp	r7, #111	; 0x6f
 8003b2c:	bf0c      	ite	eq
 8003b2e:	2308      	moveq	r3, #8
 8003b30:	230a      	movne	r3, #10
 8003b32:	4851      	ldr	r0, [pc, #324]	; (8003c78 <_printf_i+0x23c>)
 8003b34:	2100      	movs	r1, #0
 8003b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b3a:	6865      	ldr	r5, [r4, #4]
 8003b3c:	2d00      	cmp	r5, #0
 8003b3e:	bfa8      	it	ge
 8003b40:	6821      	ldrge	r1, [r4, #0]
 8003b42:	60a5      	str	r5, [r4, #8]
 8003b44:	bfa4      	itt	ge
 8003b46:	f021 0104 	bicge.w	r1, r1, #4
 8003b4a:	6021      	strge	r1, [r4, #0]
 8003b4c:	b90e      	cbnz	r6, 8003b52 <_printf_i+0x116>
 8003b4e:	2d00      	cmp	r5, #0
 8003b50:	d04b      	beq.n	8003bea <_printf_i+0x1ae>
 8003b52:	4615      	mov	r5, r2
 8003b54:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b58:	fb03 6711 	mls	r7, r3, r1, r6
 8003b5c:	5dc7      	ldrb	r7, [r0, r7]
 8003b5e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b62:	4637      	mov	r7, r6
 8003b64:	42bb      	cmp	r3, r7
 8003b66:	460e      	mov	r6, r1
 8003b68:	d9f4      	bls.n	8003b54 <_printf_i+0x118>
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d10b      	bne.n	8003b86 <_printf_i+0x14a>
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	07de      	lsls	r6, r3, #31
 8003b72:	d508      	bpl.n	8003b86 <_printf_i+0x14a>
 8003b74:	6923      	ldr	r3, [r4, #16]
 8003b76:	6861      	ldr	r1, [r4, #4]
 8003b78:	4299      	cmp	r1, r3
 8003b7a:	bfde      	ittt	le
 8003b7c:	2330      	movle	r3, #48	; 0x30
 8003b7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b82:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003b86:	1b52      	subs	r2, r2, r5
 8003b88:	6122      	str	r2, [r4, #16]
 8003b8a:	464b      	mov	r3, r9
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	4640      	mov	r0, r8
 8003b90:	f8cd a000 	str.w	sl, [sp]
 8003b94:	aa03      	add	r2, sp, #12
 8003b96:	f7ff fedf 	bl	8003958 <_printf_common>
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	d14a      	bne.n	8003c34 <_printf_i+0x1f8>
 8003b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ba2:	b004      	add	sp, #16
 8003ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	f043 0320 	orr.w	r3, r3, #32
 8003bae:	6023      	str	r3, [r4, #0]
 8003bb0:	2778      	movs	r7, #120	; 0x78
 8003bb2:	4832      	ldr	r0, [pc, #200]	; (8003c7c <_printf_i+0x240>)
 8003bb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	6829      	ldr	r1, [r5, #0]
 8003bbc:	061f      	lsls	r7, r3, #24
 8003bbe:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bc2:	d402      	bmi.n	8003bca <_printf_i+0x18e>
 8003bc4:	065f      	lsls	r7, r3, #25
 8003bc6:	bf48      	it	mi
 8003bc8:	b2b6      	uxthmi	r6, r6
 8003bca:	07df      	lsls	r7, r3, #31
 8003bcc:	bf48      	it	mi
 8003bce:	f043 0320 	orrmi.w	r3, r3, #32
 8003bd2:	6029      	str	r1, [r5, #0]
 8003bd4:	bf48      	it	mi
 8003bd6:	6023      	strmi	r3, [r4, #0]
 8003bd8:	b91e      	cbnz	r6, 8003be2 <_printf_i+0x1a6>
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	f023 0320 	bic.w	r3, r3, #32
 8003be0:	6023      	str	r3, [r4, #0]
 8003be2:	2310      	movs	r3, #16
 8003be4:	e7a6      	b.n	8003b34 <_printf_i+0xf8>
 8003be6:	4824      	ldr	r0, [pc, #144]	; (8003c78 <_printf_i+0x23c>)
 8003be8:	e7e4      	b.n	8003bb4 <_printf_i+0x178>
 8003bea:	4615      	mov	r5, r2
 8003bec:	e7bd      	b.n	8003b6a <_printf_i+0x12e>
 8003bee:	682b      	ldr	r3, [r5, #0]
 8003bf0:	6826      	ldr	r6, [r4, #0]
 8003bf2:	1d18      	adds	r0, r3, #4
 8003bf4:	6961      	ldr	r1, [r4, #20]
 8003bf6:	6028      	str	r0, [r5, #0]
 8003bf8:	0635      	lsls	r5, r6, #24
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	d501      	bpl.n	8003c02 <_printf_i+0x1c6>
 8003bfe:	6019      	str	r1, [r3, #0]
 8003c00:	e002      	b.n	8003c08 <_printf_i+0x1cc>
 8003c02:	0670      	lsls	r0, r6, #25
 8003c04:	d5fb      	bpl.n	8003bfe <_printf_i+0x1c2>
 8003c06:	8019      	strh	r1, [r3, #0]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	4615      	mov	r5, r2
 8003c0c:	6123      	str	r3, [r4, #16]
 8003c0e:	e7bc      	b.n	8003b8a <_printf_i+0x14e>
 8003c10:	682b      	ldr	r3, [r5, #0]
 8003c12:	2100      	movs	r1, #0
 8003c14:	1d1a      	adds	r2, r3, #4
 8003c16:	602a      	str	r2, [r5, #0]
 8003c18:	681d      	ldr	r5, [r3, #0]
 8003c1a:	6862      	ldr	r2, [r4, #4]
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	f000 f97f 	bl	8003f20 <memchr>
 8003c22:	b108      	cbz	r0, 8003c28 <_printf_i+0x1ec>
 8003c24:	1b40      	subs	r0, r0, r5
 8003c26:	6060      	str	r0, [r4, #4]
 8003c28:	6863      	ldr	r3, [r4, #4]
 8003c2a:	6123      	str	r3, [r4, #16]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c32:	e7aa      	b.n	8003b8a <_printf_i+0x14e>
 8003c34:	462a      	mov	r2, r5
 8003c36:	4649      	mov	r1, r9
 8003c38:	4640      	mov	r0, r8
 8003c3a:	6923      	ldr	r3, [r4, #16]
 8003c3c:	47d0      	blx	sl
 8003c3e:	3001      	adds	r0, #1
 8003c40:	d0ad      	beq.n	8003b9e <_printf_i+0x162>
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	079b      	lsls	r3, r3, #30
 8003c46:	d413      	bmi.n	8003c70 <_printf_i+0x234>
 8003c48:	68e0      	ldr	r0, [r4, #12]
 8003c4a:	9b03      	ldr	r3, [sp, #12]
 8003c4c:	4298      	cmp	r0, r3
 8003c4e:	bfb8      	it	lt
 8003c50:	4618      	movlt	r0, r3
 8003c52:	e7a6      	b.n	8003ba2 <_printf_i+0x166>
 8003c54:	2301      	movs	r3, #1
 8003c56:	4632      	mov	r2, r6
 8003c58:	4649      	mov	r1, r9
 8003c5a:	4640      	mov	r0, r8
 8003c5c:	47d0      	blx	sl
 8003c5e:	3001      	adds	r0, #1
 8003c60:	d09d      	beq.n	8003b9e <_printf_i+0x162>
 8003c62:	3501      	adds	r5, #1
 8003c64:	68e3      	ldr	r3, [r4, #12]
 8003c66:	9903      	ldr	r1, [sp, #12]
 8003c68:	1a5b      	subs	r3, r3, r1
 8003c6a:	42ab      	cmp	r3, r5
 8003c6c:	dcf2      	bgt.n	8003c54 <_printf_i+0x218>
 8003c6e:	e7eb      	b.n	8003c48 <_printf_i+0x20c>
 8003c70:	2500      	movs	r5, #0
 8003c72:	f104 0619 	add.w	r6, r4, #25
 8003c76:	e7f5      	b.n	8003c64 <_printf_i+0x228>
 8003c78:	08004efb 	.word	0x08004efb
 8003c7c:	08004f0c 	.word	0x08004f0c

08003c80 <__sflush_r>:
 8003c80:	898a      	ldrh	r2, [r1, #12]
 8003c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c84:	4605      	mov	r5, r0
 8003c86:	0710      	lsls	r0, r2, #28
 8003c88:	460c      	mov	r4, r1
 8003c8a:	d457      	bmi.n	8003d3c <__sflush_r+0xbc>
 8003c8c:	684b      	ldr	r3, [r1, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	dc04      	bgt.n	8003c9c <__sflush_r+0x1c>
 8003c92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	dc01      	bgt.n	8003c9c <__sflush_r+0x1c>
 8003c98:	2000      	movs	r0, #0
 8003c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c9e:	2e00      	cmp	r6, #0
 8003ca0:	d0fa      	beq.n	8003c98 <__sflush_r+0x18>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ca8:	682f      	ldr	r7, [r5, #0]
 8003caa:	6a21      	ldr	r1, [r4, #32]
 8003cac:	602b      	str	r3, [r5, #0]
 8003cae:	d032      	beq.n	8003d16 <__sflush_r+0x96>
 8003cb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	075a      	lsls	r2, r3, #29
 8003cb6:	d505      	bpl.n	8003cc4 <__sflush_r+0x44>
 8003cb8:	6863      	ldr	r3, [r4, #4]
 8003cba:	1ac0      	subs	r0, r0, r3
 8003cbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cbe:	b10b      	cbz	r3, 8003cc4 <__sflush_r+0x44>
 8003cc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cc2:	1ac0      	subs	r0, r0, r3
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cca:	4628      	mov	r0, r5
 8003ccc:	6a21      	ldr	r1, [r4, #32]
 8003cce:	47b0      	blx	r6
 8003cd0:	1c43      	adds	r3, r0, #1
 8003cd2:	89a3      	ldrh	r3, [r4, #12]
 8003cd4:	d106      	bne.n	8003ce4 <__sflush_r+0x64>
 8003cd6:	6829      	ldr	r1, [r5, #0]
 8003cd8:	291d      	cmp	r1, #29
 8003cda:	d82b      	bhi.n	8003d34 <__sflush_r+0xb4>
 8003cdc:	4a28      	ldr	r2, [pc, #160]	; (8003d80 <__sflush_r+0x100>)
 8003cde:	410a      	asrs	r2, r1
 8003ce0:	07d6      	lsls	r6, r2, #31
 8003ce2:	d427      	bmi.n	8003d34 <__sflush_r+0xb4>
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	6062      	str	r2, [r4, #4]
 8003ce8:	6922      	ldr	r2, [r4, #16]
 8003cea:	04d9      	lsls	r1, r3, #19
 8003cec:	6022      	str	r2, [r4, #0]
 8003cee:	d504      	bpl.n	8003cfa <__sflush_r+0x7a>
 8003cf0:	1c42      	adds	r2, r0, #1
 8003cf2:	d101      	bne.n	8003cf8 <__sflush_r+0x78>
 8003cf4:	682b      	ldr	r3, [r5, #0]
 8003cf6:	b903      	cbnz	r3, 8003cfa <__sflush_r+0x7a>
 8003cf8:	6560      	str	r0, [r4, #84]	; 0x54
 8003cfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cfc:	602f      	str	r7, [r5, #0]
 8003cfe:	2900      	cmp	r1, #0
 8003d00:	d0ca      	beq.n	8003c98 <__sflush_r+0x18>
 8003d02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d06:	4299      	cmp	r1, r3
 8003d08:	d002      	beq.n	8003d10 <__sflush_r+0x90>
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	f7ff fbee 	bl	80034ec <_free_r>
 8003d10:	2000      	movs	r0, #0
 8003d12:	6360      	str	r0, [r4, #52]	; 0x34
 8003d14:	e7c1      	b.n	8003c9a <__sflush_r+0x1a>
 8003d16:	2301      	movs	r3, #1
 8003d18:	4628      	mov	r0, r5
 8003d1a:	47b0      	blx	r6
 8003d1c:	1c41      	adds	r1, r0, #1
 8003d1e:	d1c8      	bne.n	8003cb2 <__sflush_r+0x32>
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0c5      	beq.n	8003cb2 <__sflush_r+0x32>
 8003d26:	2b1d      	cmp	r3, #29
 8003d28:	d001      	beq.n	8003d2e <__sflush_r+0xae>
 8003d2a:	2b16      	cmp	r3, #22
 8003d2c:	d101      	bne.n	8003d32 <__sflush_r+0xb2>
 8003d2e:	602f      	str	r7, [r5, #0]
 8003d30:	e7b2      	b.n	8003c98 <__sflush_r+0x18>
 8003d32:	89a3      	ldrh	r3, [r4, #12]
 8003d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d38:	81a3      	strh	r3, [r4, #12]
 8003d3a:	e7ae      	b.n	8003c9a <__sflush_r+0x1a>
 8003d3c:	690f      	ldr	r7, [r1, #16]
 8003d3e:	2f00      	cmp	r7, #0
 8003d40:	d0aa      	beq.n	8003c98 <__sflush_r+0x18>
 8003d42:	0793      	lsls	r3, r2, #30
 8003d44:	bf18      	it	ne
 8003d46:	2300      	movne	r3, #0
 8003d48:	680e      	ldr	r6, [r1, #0]
 8003d4a:	bf08      	it	eq
 8003d4c:	694b      	ldreq	r3, [r1, #20]
 8003d4e:	1bf6      	subs	r6, r6, r7
 8003d50:	600f      	str	r7, [r1, #0]
 8003d52:	608b      	str	r3, [r1, #8]
 8003d54:	2e00      	cmp	r6, #0
 8003d56:	dd9f      	ble.n	8003c98 <__sflush_r+0x18>
 8003d58:	4633      	mov	r3, r6
 8003d5a:	463a      	mov	r2, r7
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	6a21      	ldr	r1, [r4, #32]
 8003d60:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003d64:	47e0      	blx	ip
 8003d66:	2800      	cmp	r0, #0
 8003d68:	dc06      	bgt.n	8003d78 <__sflush_r+0xf8>
 8003d6a:	89a3      	ldrh	r3, [r4, #12]
 8003d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d74:	81a3      	strh	r3, [r4, #12]
 8003d76:	e790      	b.n	8003c9a <__sflush_r+0x1a>
 8003d78:	4407      	add	r7, r0
 8003d7a:	1a36      	subs	r6, r6, r0
 8003d7c:	e7ea      	b.n	8003d54 <__sflush_r+0xd4>
 8003d7e:	bf00      	nop
 8003d80:	dfbffffe 	.word	0xdfbffffe

08003d84 <_fflush_r>:
 8003d84:	b538      	push	{r3, r4, r5, lr}
 8003d86:	690b      	ldr	r3, [r1, #16]
 8003d88:	4605      	mov	r5, r0
 8003d8a:	460c      	mov	r4, r1
 8003d8c:	b913      	cbnz	r3, 8003d94 <_fflush_r+0x10>
 8003d8e:	2500      	movs	r5, #0
 8003d90:	4628      	mov	r0, r5
 8003d92:	bd38      	pop	{r3, r4, r5, pc}
 8003d94:	b118      	cbz	r0, 8003d9e <_fflush_r+0x1a>
 8003d96:	6a03      	ldr	r3, [r0, #32]
 8003d98:	b90b      	cbnz	r3, 8003d9e <_fflush_r+0x1a>
 8003d9a:	f7ff fa9f 	bl	80032dc <__sinit>
 8003d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f3      	beq.n	8003d8e <_fflush_r+0xa>
 8003da6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003da8:	07d0      	lsls	r0, r2, #31
 8003daa:	d404      	bmi.n	8003db6 <_fflush_r+0x32>
 8003dac:	0599      	lsls	r1, r3, #22
 8003dae:	d402      	bmi.n	8003db6 <_fflush_r+0x32>
 8003db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003db2:	f7ff fb98 	bl	80034e6 <__retarget_lock_acquire_recursive>
 8003db6:	4628      	mov	r0, r5
 8003db8:	4621      	mov	r1, r4
 8003dba:	f7ff ff61 	bl	8003c80 <__sflush_r>
 8003dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dc0:	4605      	mov	r5, r0
 8003dc2:	07da      	lsls	r2, r3, #31
 8003dc4:	d4e4      	bmi.n	8003d90 <_fflush_r+0xc>
 8003dc6:	89a3      	ldrh	r3, [r4, #12]
 8003dc8:	059b      	lsls	r3, r3, #22
 8003dca:	d4e1      	bmi.n	8003d90 <_fflush_r+0xc>
 8003dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dce:	f7ff fb8b 	bl	80034e8 <__retarget_lock_release_recursive>
 8003dd2:	e7dd      	b.n	8003d90 <_fflush_r+0xc>

08003dd4 <__swbuf_r>:
 8003dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd6:	460e      	mov	r6, r1
 8003dd8:	4614      	mov	r4, r2
 8003dda:	4605      	mov	r5, r0
 8003ddc:	b118      	cbz	r0, 8003de6 <__swbuf_r+0x12>
 8003dde:	6a03      	ldr	r3, [r0, #32]
 8003de0:	b90b      	cbnz	r3, 8003de6 <__swbuf_r+0x12>
 8003de2:	f7ff fa7b 	bl	80032dc <__sinit>
 8003de6:	69a3      	ldr	r3, [r4, #24]
 8003de8:	60a3      	str	r3, [r4, #8]
 8003dea:	89a3      	ldrh	r3, [r4, #12]
 8003dec:	071a      	lsls	r2, r3, #28
 8003dee:	d525      	bpl.n	8003e3c <__swbuf_r+0x68>
 8003df0:	6923      	ldr	r3, [r4, #16]
 8003df2:	b31b      	cbz	r3, 8003e3c <__swbuf_r+0x68>
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	6922      	ldr	r2, [r4, #16]
 8003df8:	b2f6      	uxtb	r6, r6
 8003dfa:	1a98      	subs	r0, r3, r2
 8003dfc:	6963      	ldr	r3, [r4, #20]
 8003dfe:	4637      	mov	r7, r6
 8003e00:	4283      	cmp	r3, r0
 8003e02:	dc04      	bgt.n	8003e0e <__swbuf_r+0x3a>
 8003e04:	4621      	mov	r1, r4
 8003e06:	4628      	mov	r0, r5
 8003e08:	f7ff ffbc 	bl	8003d84 <_fflush_r>
 8003e0c:	b9e0      	cbnz	r0, 8003e48 <__swbuf_r+0x74>
 8003e0e:	68a3      	ldr	r3, [r4, #8]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	60a3      	str	r3, [r4, #8]
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	6022      	str	r2, [r4, #0]
 8003e1a:	701e      	strb	r6, [r3, #0]
 8003e1c:	6962      	ldr	r2, [r4, #20]
 8003e1e:	1c43      	adds	r3, r0, #1
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d004      	beq.n	8003e2e <__swbuf_r+0x5a>
 8003e24:	89a3      	ldrh	r3, [r4, #12]
 8003e26:	07db      	lsls	r3, r3, #31
 8003e28:	d506      	bpl.n	8003e38 <__swbuf_r+0x64>
 8003e2a:	2e0a      	cmp	r6, #10
 8003e2c:	d104      	bne.n	8003e38 <__swbuf_r+0x64>
 8003e2e:	4621      	mov	r1, r4
 8003e30:	4628      	mov	r0, r5
 8003e32:	f7ff ffa7 	bl	8003d84 <_fflush_r>
 8003e36:	b938      	cbnz	r0, 8003e48 <__swbuf_r+0x74>
 8003e38:	4638      	mov	r0, r7
 8003e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f000 f806 	bl	8003e50 <__swsetup_r>
 8003e44:	2800      	cmp	r0, #0
 8003e46:	d0d5      	beq.n	8003df4 <__swbuf_r+0x20>
 8003e48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003e4c:	e7f4      	b.n	8003e38 <__swbuf_r+0x64>
	...

08003e50 <__swsetup_r>:
 8003e50:	b538      	push	{r3, r4, r5, lr}
 8003e52:	4b2a      	ldr	r3, [pc, #168]	; (8003efc <__swsetup_r+0xac>)
 8003e54:	4605      	mov	r5, r0
 8003e56:	6818      	ldr	r0, [r3, #0]
 8003e58:	460c      	mov	r4, r1
 8003e5a:	b118      	cbz	r0, 8003e64 <__swsetup_r+0x14>
 8003e5c:	6a03      	ldr	r3, [r0, #32]
 8003e5e:	b90b      	cbnz	r3, 8003e64 <__swsetup_r+0x14>
 8003e60:	f7ff fa3c 	bl	80032dc <__sinit>
 8003e64:	89a3      	ldrh	r3, [r4, #12]
 8003e66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e6a:	0718      	lsls	r0, r3, #28
 8003e6c:	d422      	bmi.n	8003eb4 <__swsetup_r+0x64>
 8003e6e:	06d9      	lsls	r1, r3, #27
 8003e70:	d407      	bmi.n	8003e82 <__swsetup_r+0x32>
 8003e72:	2309      	movs	r3, #9
 8003e74:	602b      	str	r3, [r5, #0]
 8003e76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e7e:	81a3      	strh	r3, [r4, #12]
 8003e80:	e034      	b.n	8003eec <__swsetup_r+0x9c>
 8003e82:	0758      	lsls	r0, r3, #29
 8003e84:	d512      	bpl.n	8003eac <__swsetup_r+0x5c>
 8003e86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e88:	b141      	cbz	r1, 8003e9c <__swsetup_r+0x4c>
 8003e8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e8e:	4299      	cmp	r1, r3
 8003e90:	d002      	beq.n	8003e98 <__swsetup_r+0x48>
 8003e92:	4628      	mov	r0, r5
 8003e94:	f7ff fb2a 	bl	80034ec <_free_r>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	6363      	str	r3, [r4, #52]	; 0x34
 8003e9c:	89a3      	ldrh	r3, [r4, #12]
 8003e9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ea2:	81a3      	strh	r3, [r4, #12]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	6063      	str	r3, [r4, #4]
 8003ea8:	6923      	ldr	r3, [r4, #16]
 8003eaa:	6023      	str	r3, [r4, #0]
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	f043 0308 	orr.w	r3, r3, #8
 8003eb2:	81a3      	strh	r3, [r4, #12]
 8003eb4:	6923      	ldr	r3, [r4, #16]
 8003eb6:	b94b      	cbnz	r3, 8003ecc <__swsetup_r+0x7c>
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec2:	d003      	beq.n	8003ecc <__swsetup_r+0x7c>
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	f000 f85d 	bl	8003f86 <__smakebuf_r>
 8003ecc:	89a0      	ldrh	r0, [r4, #12]
 8003ece:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ed2:	f010 0301 	ands.w	r3, r0, #1
 8003ed6:	d00a      	beq.n	8003eee <__swsetup_r+0x9e>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60a3      	str	r3, [r4, #8]
 8003edc:	6963      	ldr	r3, [r4, #20]
 8003ede:	425b      	negs	r3, r3
 8003ee0:	61a3      	str	r3, [r4, #24]
 8003ee2:	6923      	ldr	r3, [r4, #16]
 8003ee4:	b943      	cbnz	r3, 8003ef8 <__swsetup_r+0xa8>
 8003ee6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003eea:	d1c4      	bne.n	8003e76 <__swsetup_r+0x26>
 8003eec:	bd38      	pop	{r3, r4, r5, pc}
 8003eee:	0781      	lsls	r1, r0, #30
 8003ef0:	bf58      	it	pl
 8003ef2:	6963      	ldrpl	r3, [r4, #20]
 8003ef4:	60a3      	str	r3, [r4, #8]
 8003ef6:	e7f4      	b.n	8003ee2 <__swsetup_r+0x92>
 8003ef8:	2000      	movs	r0, #0
 8003efa:	e7f7      	b.n	8003eec <__swsetup_r+0x9c>
 8003efc:	20000098 	.word	0x20000098

08003f00 <_sbrk_r>:
 8003f00:	b538      	push	{r3, r4, r5, lr}
 8003f02:	2300      	movs	r3, #0
 8003f04:	4d05      	ldr	r5, [pc, #20]	; (8003f1c <_sbrk_r+0x1c>)
 8003f06:	4604      	mov	r4, r0
 8003f08:	4608      	mov	r0, r1
 8003f0a:	602b      	str	r3, [r5, #0]
 8003f0c:	f7fd fa46 	bl	800139c <_sbrk>
 8003f10:	1c43      	adds	r3, r0, #1
 8003f12:	d102      	bne.n	8003f1a <_sbrk_r+0x1a>
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	b103      	cbz	r3, 8003f1a <_sbrk_r+0x1a>
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	bd38      	pop	{r3, r4, r5, pc}
 8003f1c:	200002bc 	.word	0x200002bc

08003f20 <memchr>:
 8003f20:	4603      	mov	r3, r0
 8003f22:	b510      	push	{r4, lr}
 8003f24:	b2c9      	uxtb	r1, r1
 8003f26:	4402      	add	r2, r0
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	d101      	bne.n	8003f32 <memchr+0x12>
 8003f2e:	2000      	movs	r0, #0
 8003f30:	e003      	b.n	8003f3a <memchr+0x1a>
 8003f32:	7804      	ldrb	r4, [r0, #0]
 8003f34:	3301      	adds	r3, #1
 8003f36:	428c      	cmp	r4, r1
 8003f38:	d1f6      	bne.n	8003f28 <memchr+0x8>
 8003f3a:	bd10      	pop	{r4, pc}

08003f3c <__swhatbuf_r>:
 8003f3c:	b570      	push	{r4, r5, r6, lr}
 8003f3e:	460c      	mov	r4, r1
 8003f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f44:	4615      	mov	r5, r2
 8003f46:	2900      	cmp	r1, #0
 8003f48:	461e      	mov	r6, r3
 8003f4a:	b096      	sub	sp, #88	; 0x58
 8003f4c:	da0c      	bge.n	8003f68 <__swhatbuf_r+0x2c>
 8003f4e:	89a3      	ldrh	r3, [r4, #12]
 8003f50:	2100      	movs	r1, #0
 8003f52:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f56:	bf0c      	ite	eq
 8003f58:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003f5c:	2340      	movne	r3, #64	; 0x40
 8003f5e:	2000      	movs	r0, #0
 8003f60:	6031      	str	r1, [r6, #0]
 8003f62:	602b      	str	r3, [r5, #0]
 8003f64:	b016      	add	sp, #88	; 0x58
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	466a      	mov	r2, sp
 8003f6a:	f000 f849 	bl	8004000 <_fstat_r>
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	dbed      	blt.n	8003f4e <__swhatbuf_r+0x12>
 8003f72:	9901      	ldr	r1, [sp, #4]
 8003f74:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003f78:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003f7c:	4259      	negs	r1, r3
 8003f7e:	4159      	adcs	r1, r3
 8003f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f84:	e7eb      	b.n	8003f5e <__swhatbuf_r+0x22>

08003f86 <__smakebuf_r>:
 8003f86:	898b      	ldrh	r3, [r1, #12]
 8003f88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f8a:	079d      	lsls	r5, r3, #30
 8003f8c:	4606      	mov	r6, r0
 8003f8e:	460c      	mov	r4, r1
 8003f90:	d507      	bpl.n	8003fa2 <__smakebuf_r+0x1c>
 8003f92:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	6123      	str	r3, [r4, #16]
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	6163      	str	r3, [r4, #20]
 8003f9e:	b002      	add	sp, #8
 8003fa0:	bd70      	pop	{r4, r5, r6, pc}
 8003fa2:	466a      	mov	r2, sp
 8003fa4:	ab01      	add	r3, sp, #4
 8003fa6:	f7ff ffc9 	bl	8003f3c <__swhatbuf_r>
 8003faa:	9900      	ldr	r1, [sp, #0]
 8003fac:	4605      	mov	r5, r0
 8003fae:	4630      	mov	r0, r6
 8003fb0:	f7ff fb04 	bl	80035bc <_malloc_r>
 8003fb4:	b948      	cbnz	r0, 8003fca <__smakebuf_r+0x44>
 8003fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fba:	059a      	lsls	r2, r3, #22
 8003fbc:	d4ef      	bmi.n	8003f9e <__smakebuf_r+0x18>
 8003fbe:	f023 0303 	bic.w	r3, r3, #3
 8003fc2:	f043 0302 	orr.w	r3, r3, #2
 8003fc6:	81a3      	strh	r3, [r4, #12]
 8003fc8:	e7e3      	b.n	8003f92 <__smakebuf_r+0xc>
 8003fca:	89a3      	ldrh	r3, [r4, #12]
 8003fcc:	6020      	str	r0, [r4, #0]
 8003fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd2:	81a3      	strh	r3, [r4, #12]
 8003fd4:	9b00      	ldr	r3, [sp, #0]
 8003fd6:	6120      	str	r0, [r4, #16]
 8003fd8:	6163      	str	r3, [r4, #20]
 8003fda:	9b01      	ldr	r3, [sp, #4]
 8003fdc:	b15b      	cbz	r3, 8003ff6 <__smakebuf_r+0x70>
 8003fde:	4630      	mov	r0, r6
 8003fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fe4:	f000 f81e 	bl	8004024 <_isatty_r>
 8003fe8:	b128      	cbz	r0, 8003ff6 <__smakebuf_r+0x70>
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	f023 0303 	bic.w	r3, r3, #3
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	81a3      	strh	r3, [r4, #12]
 8003ff6:	89a3      	ldrh	r3, [r4, #12]
 8003ff8:	431d      	orrs	r5, r3
 8003ffa:	81a5      	strh	r5, [r4, #12]
 8003ffc:	e7cf      	b.n	8003f9e <__smakebuf_r+0x18>
	...

08004000 <_fstat_r>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	2300      	movs	r3, #0
 8004004:	4d06      	ldr	r5, [pc, #24]	; (8004020 <_fstat_r+0x20>)
 8004006:	4604      	mov	r4, r0
 8004008:	4608      	mov	r0, r1
 800400a:	4611      	mov	r1, r2
 800400c:	602b      	str	r3, [r5, #0]
 800400e:	f7fd f99f 	bl	8001350 <_fstat>
 8004012:	1c43      	adds	r3, r0, #1
 8004014:	d102      	bne.n	800401c <_fstat_r+0x1c>
 8004016:	682b      	ldr	r3, [r5, #0]
 8004018:	b103      	cbz	r3, 800401c <_fstat_r+0x1c>
 800401a:	6023      	str	r3, [r4, #0]
 800401c:	bd38      	pop	{r3, r4, r5, pc}
 800401e:	bf00      	nop
 8004020:	200002bc 	.word	0x200002bc

08004024 <_isatty_r>:
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	2300      	movs	r3, #0
 8004028:	4d05      	ldr	r5, [pc, #20]	; (8004040 <_isatty_r+0x1c>)
 800402a:	4604      	mov	r4, r0
 800402c:	4608      	mov	r0, r1
 800402e:	602b      	str	r3, [r5, #0]
 8004030:	f7fd f99d 	bl	800136e <_isatty>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d102      	bne.n	800403e <_isatty_r+0x1a>
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	b103      	cbz	r3, 800403e <_isatty_r+0x1a>
 800403c:	6023      	str	r3, [r4, #0]
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	200002bc 	.word	0x200002bc

08004044 <pow>:
 8004044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004048:	4614      	mov	r4, r2
 800404a:	461d      	mov	r5, r3
 800404c:	4680      	mov	r8, r0
 800404e:	4689      	mov	r9, r1
 8004050:	f000 f866 	bl	8004120 <__ieee754_pow>
 8004054:	4622      	mov	r2, r4
 8004056:	4606      	mov	r6, r0
 8004058:	460f      	mov	r7, r1
 800405a:	462b      	mov	r3, r5
 800405c:	4620      	mov	r0, r4
 800405e:	4629      	mov	r1, r5
 8004060:	f7fc fccc 	bl	80009fc <__aeabi_dcmpun>
 8004064:	bbc8      	cbnz	r0, 80040da <pow+0x96>
 8004066:	2200      	movs	r2, #0
 8004068:	2300      	movs	r3, #0
 800406a:	4640      	mov	r0, r8
 800406c:	4649      	mov	r1, r9
 800406e:	f7fc fc93 	bl	8000998 <__aeabi_dcmpeq>
 8004072:	b1b8      	cbz	r0, 80040a4 <pow+0x60>
 8004074:	2200      	movs	r2, #0
 8004076:	2300      	movs	r3, #0
 8004078:	4620      	mov	r0, r4
 800407a:	4629      	mov	r1, r5
 800407c:	f7fc fc8c 	bl	8000998 <__aeabi_dcmpeq>
 8004080:	2800      	cmp	r0, #0
 8004082:	d141      	bne.n	8004108 <pow+0xc4>
 8004084:	4620      	mov	r0, r4
 8004086:	4629      	mov	r1, r5
 8004088:	f000 f844 	bl	8004114 <finite>
 800408c:	b328      	cbz	r0, 80040da <pow+0x96>
 800408e:	2200      	movs	r2, #0
 8004090:	2300      	movs	r3, #0
 8004092:	4620      	mov	r0, r4
 8004094:	4629      	mov	r1, r5
 8004096:	f7fc fc89 	bl	80009ac <__aeabi_dcmplt>
 800409a:	b1f0      	cbz	r0, 80040da <pow+0x96>
 800409c:	f7ff f9f8 	bl	8003490 <__errno>
 80040a0:	2322      	movs	r3, #34	; 0x22
 80040a2:	e019      	b.n	80040d8 <pow+0x94>
 80040a4:	4630      	mov	r0, r6
 80040a6:	4639      	mov	r1, r7
 80040a8:	f000 f834 	bl	8004114 <finite>
 80040ac:	b9c8      	cbnz	r0, 80040e2 <pow+0x9e>
 80040ae:	4640      	mov	r0, r8
 80040b0:	4649      	mov	r1, r9
 80040b2:	f000 f82f 	bl	8004114 <finite>
 80040b6:	b1a0      	cbz	r0, 80040e2 <pow+0x9e>
 80040b8:	4620      	mov	r0, r4
 80040ba:	4629      	mov	r1, r5
 80040bc:	f000 f82a 	bl	8004114 <finite>
 80040c0:	b178      	cbz	r0, 80040e2 <pow+0x9e>
 80040c2:	4632      	mov	r2, r6
 80040c4:	463b      	mov	r3, r7
 80040c6:	4630      	mov	r0, r6
 80040c8:	4639      	mov	r1, r7
 80040ca:	f7fc fc97 	bl	80009fc <__aeabi_dcmpun>
 80040ce:	2800      	cmp	r0, #0
 80040d0:	d0e4      	beq.n	800409c <pow+0x58>
 80040d2:	f7ff f9dd 	bl	8003490 <__errno>
 80040d6:	2321      	movs	r3, #33	; 0x21
 80040d8:	6003      	str	r3, [r0, #0]
 80040da:	4630      	mov	r0, r6
 80040dc:	4639      	mov	r1, r7
 80040de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040e2:	2200      	movs	r2, #0
 80040e4:	2300      	movs	r3, #0
 80040e6:	4630      	mov	r0, r6
 80040e8:	4639      	mov	r1, r7
 80040ea:	f7fc fc55 	bl	8000998 <__aeabi_dcmpeq>
 80040ee:	2800      	cmp	r0, #0
 80040f0:	d0f3      	beq.n	80040da <pow+0x96>
 80040f2:	4640      	mov	r0, r8
 80040f4:	4649      	mov	r1, r9
 80040f6:	f000 f80d 	bl	8004114 <finite>
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d0ed      	beq.n	80040da <pow+0x96>
 80040fe:	4620      	mov	r0, r4
 8004100:	4629      	mov	r1, r5
 8004102:	f000 f807 	bl	8004114 <finite>
 8004106:	e7c8      	b.n	800409a <pow+0x56>
 8004108:	2600      	movs	r6, #0
 800410a:	4f01      	ldr	r7, [pc, #4]	; (8004110 <pow+0xcc>)
 800410c:	e7e5      	b.n	80040da <pow+0x96>
 800410e:	bf00      	nop
 8004110:	3ff00000 	.word	0x3ff00000

08004114 <finite>:
 8004114:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8004118:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800411c:	0fc0      	lsrs	r0, r0, #31
 800411e:	4770      	bx	lr

08004120 <__ieee754_pow>:
 8004120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004124:	b093      	sub	sp, #76	; 0x4c
 8004126:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800412a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800412e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8004132:	4689      	mov	r9, r1
 8004134:	ea56 0102 	orrs.w	r1, r6, r2
 8004138:	4680      	mov	r8, r0
 800413a:	d111      	bne.n	8004160 <__ieee754_pow+0x40>
 800413c:	1803      	adds	r3, r0, r0
 800413e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8004142:	4152      	adcs	r2, r2
 8004144:	4299      	cmp	r1, r3
 8004146:	4b82      	ldr	r3, [pc, #520]	; (8004350 <__ieee754_pow+0x230>)
 8004148:	4193      	sbcs	r3, r2
 800414a:	f080 84ba 	bcs.w	8004ac2 <__ieee754_pow+0x9a2>
 800414e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004152:	4640      	mov	r0, r8
 8004154:	4649      	mov	r1, r9
 8004156:	f7fc f801 	bl	800015c <__adddf3>
 800415a:	4683      	mov	fp, r0
 800415c:	468c      	mov	ip, r1
 800415e:	e06f      	b.n	8004240 <__ieee754_pow+0x120>
 8004160:	4b7c      	ldr	r3, [pc, #496]	; (8004354 <__ieee754_pow+0x234>)
 8004162:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8004166:	429c      	cmp	r4, r3
 8004168:	464d      	mov	r5, r9
 800416a:	4682      	mov	sl, r0
 800416c:	dc06      	bgt.n	800417c <__ieee754_pow+0x5c>
 800416e:	d101      	bne.n	8004174 <__ieee754_pow+0x54>
 8004170:	2800      	cmp	r0, #0
 8004172:	d1ec      	bne.n	800414e <__ieee754_pow+0x2e>
 8004174:	429e      	cmp	r6, r3
 8004176:	dc01      	bgt.n	800417c <__ieee754_pow+0x5c>
 8004178:	d10f      	bne.n	800419a <__ieee754_pow+0x7a>
 800417a:	b172      	cbz	r2, 800419a <__ieee754_pow+0x7a>
 800417c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004180:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004184:	ea55 050a 	orrs.w	r5, r5, sl
 8004188:	d1e1      	bne.n	800414e <__ieee754_pow+0x2e>
 800418a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800418e:	18db      	adds	r3, r3, r3
 8004190:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004194:	4152      	adcs	r2, r2
 8004196:	429d      	cmp	r5, r3
 8004198:	e7d5      	b.n	8004146 <__ieee754_pow+0x26>
 800419a:	2d00      	cmp	r5, #0
 800419c:	da39      	bge.n	8004212 <__ieee754_pow+0xf2>
 800419e:	4b6e      	ldr	r3, [pc, #440]	; (8004358 <__ieee754_pow+0x238>)
 80041a0:	429e      	cmp	r6, r3
 80041a2:	dc52      	bgt.n	800424a <__ieee754_pow+0x12a>
 80041a4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80041a8:	429e      	cmp	r6, r3
 80041aa:	f340 849d 	ble.w	8004ae8 <__ieee754_pow+0x9c8>
 80041ae:	1533      	asrs	r3, r6, #20
 80041b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80041b4:	2b14      	cmp	r3, #20
 80041b6:	dd0f      	ble.n	80041d8 <__ieee754_pow+0xb8>
 80041b8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80041bc:	fa22 f103 	lsr.w	r1, r2, r3
 80041c0:	fa01 f303 	lsl.w	r3, r1, r3
 80041c4:	4293      	cmp	r3, r2
 80041c6:	f040 848f 	bne.w	8004ae8 <__ieee754_pow+0x9c8>
 80041ca:	f001 0101 	and.w	r1, r1, #1
 80041ce:	f1c1 0302 	rsb	r3, r1, #2
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	b182      	cbz	r2, 80041f8 <__ieee754_pow+0xd8>
 80041d6:	e05d      	b.n	8004294 <__ieee754_pow+0x174>
 80041d8:	2a00      	cmp	r2, #0
 80041da:	d159      	bne.n	8004290 <__ieee754_pow+0x170>
 80041dc:	f1c3 0314 	rsb	r3, r3, #20
 80041e0:	fa46 f103 	asr.w	r1, r6, r3
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	42b3      	cmp	r3, r6
 80041ea:	f040 847a 	bne.w	8004ae2 <__ieee754_pow+0x9c2>
 80041ee:	f001 0101 	and.w	r1, r1, #1
 80041f2:	f1c1 0302 	rsb	r3, r1, #2
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	4b58      	ldr	r3, [pc, #352]	; (800435c <__ieee754_pow+0x23c>)
 80041fa:	429e      	cmp	r6, r3
 80041fc:	d132      	bne.n	8004264 <__ieee754_pow+0x144>
 80041fe:	2f00      	cmp	r7, #0
 8004200:	f280 846b 	bge.w	8004ada <__ieee754_pow+0x9ba>
 8004204:	4642      	mov	r2, r8
 8004206:	464b      	mov	r3, r9
 8004208:	2000      	movs	r0, #0
 800420a:	4954      	ldr	r1, [pc, #336]	; (800435c <__ieee754_pow+0x23c>)
 800420c:	f7fc fa86 	bl	800071c <__aeabi_ddiv>
 8004210:	e7a3      	b.n	800415a <__ieee754_pow+0x3a>
 8004212:	2300      	movs	r3, #0
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	2a00      	cmp	r2, #0
 8004218:	d13c      	bne.n	8004294 <__ieee754_pow+0x174>
 800421a:	4b4e      	ldr	r3, [pc, #312]	; (8004354 <__ieee754_pow+0x234>)
 800421c:	429e      	cmp	r6, r3
 800421e:	d1eb      	bne.n	80041f8 <__ieee754_pow+0xd8>
 8004220:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004224:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004228:	ea53 030a 	orrs.w	r3, r3, sl
 800422c:	f000 8449 	beq.w	8004ac2 <__ieee754_pow+0x9a2>
 8004230:	4b4b      	ldr	r3, [pc, #300]	; (8004360 <__ieee754_pow+0x240>)
 8004232:	429c      	cmp	r4, r3
 8004234:	dd0b      	ble.n	800424e <__ieee754_pow+0x12e>
 8004236:	2f00      	cmp	r7, #0
 8004238:	f2c0 8449 	blt.w	8004ace <__ieee754_pow+0x9ae>
 800423c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004240:	4658      	mov	r0, fp
 8004242:	4661      	mov	r1, ip
 8004244:	b013      	add	sp, #76	; 0x4c
 8004246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800424a:	2302      	movs	r3, #2
 800424c:	e7e2      	b.n	8004214 <__ieee754_pow+0xf4>
 800424e:	2f00      	cmp	r7, #0
 8004250:	f04f 0b00 	mov.w	fp, #0
 8004254:	f04f 0c00 	mov.w	ip, #0
 8004258:	daf2      	bge.n	8004240 <__ieee754_pow+0x120>
 800425a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800425e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8004262:	e7ed      	b.n	8004240 <__ieee754_pow+0x120>
 8004264:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004268:	d106      	bne.n	8004278 <__ieee754_pow+0x158>
 800426a:	4642      	mov	r2, r8
 800426c:	464b      	mov	r3, r9
 800426e:	4640      	mov	r0, r8
 8004270:	4649      	mov	r1, r9
 8004272:	f7fc f929 	bl	80004c8 <__aeabi_dmul>
 8004276:	e770      	b.n	800415a <__ieee754_pow+0x3a>
 8004278:	4b3a      	ldr	r3, [pc, #232]	; (8004364 <__ieee754_pow+0x244>)
 800427a:	429f      	cmp	r7, r3
 800427c:	d10a      	bne.n	8004294 <__ieee754_pow+0x174>
 800427e:	2d00      	cmp	r5, #0
 8004280:	db08      	blt.n	8004294 <__ieee754_pow+0x174>
 8004282:	4640      	mov	r0, r8
 8004284:	4649      	mov	r1, r9
 8004286:	b013      	add	sp, #76	; 0x4c
 8004288:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800428c:	f000 bd0a 	b.w	8004ca4 <__ieee754_sqrt>
 8004290:	2300      	movs	r3, #0
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	4640      	mov	r0, r8
 8004296:	4649      	mov	r1, r9
 8004298:	f000 fc58 	bl	8004b4c <fabs>
 800429c:	4683      	mov	fp, r0
 800429e:	468c      	mov	ip, r1
 80042a0:	f1ba 0f00 	cmp.w	sl, #0
 80042a4:	d128      	bne.n	80042f8 <__ieee754_pow+0x1d8>
 80042a6:	b124      	cbz	r4, 80042b2 <__ieee754_pow+0x192>
 80042a8:	4b2c      	ldr	r3, [pc, #176]	; (800435c <__ieee754_pow+0x23c>)
 80042aa:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d122      	bne.n	80042f8 <__ieee754_pow+0x1d8>
 80042b2:	2f00      	cmp	r7, #0
 80042b4:	da07      	bge.n	80042c6 <__ieee754_pow+0x1a6>
 80042b6:	465a      	mov	r2, fp
 80042b8:	4663      	mov	r3, ip
 80042ba:	2000      	movs	r0, #0
 80042bc:	4927      	ldr	r1, [pc, #156]	; (800435c <__ieee754_pow+0x23c>)
 80042be:	f7fc fa2d 	bl	800071c <__aeabi_ddiv>
 80042c2:	4683      	mov	fp, r0
 80042c4:	468c      	mov	ip, r1
 80042c6:	2d00      	cmp	r5, #0
 80042c8:	daba      	bge.n	8004240 <__ieee754_pow+0x120>
 80042ca:	9b00      	ldr	r3, [sp, #0]
 80042cc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80042d0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80042d4:	431c      	orrs	r4, r3
 80042d6:	d108      	bne.n	80042ea <__ieee754_pow+0x1ca>
 80042d8:	465a      	mov	r2, fp
 80042da:	4663      	mov	r3, ip
 80042dc:	4658      	mov	r0, fp
 80042de:	4661      	mov	r1, ip
 80042e0:	f7fb ff3a 	bl	8000158 <__aeabi_dsub>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	e790      	b.n	800420c <__ieee754_pow+0xec>
 80042ea:	9b00      	ldr	r3, [sp, #0]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d1a7      	bne.n	8004240 <__ieee754_pow+0x120>
 80042f0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80042f4:	469c      	mov	ip, r3
 80042f6:	e7a3      	b.n	8004240 <__ieee754_pow+0x120>
 80042f8:	0feb      	lsrs	r3, r5, #31
 80042fa:	3b01      	subs	r3, #1
 80042fc:	930c      	str	r3, [sp, #48]	; 0x30
 80042fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004300:	9b00      	ldr	r3, [sp, #0]
 8004302:	4313      	orrs	r3, r2
 8004304:	d104      	bne.n	8004310 <__ieee754_pow+0x1f0>
 8004306:	4642      	mov	r2, r8
 8004308:	464b      	mov	r3, r9
 800430a:	4640      	mov	r0, r8
 800430c:	4649      	mov	r1, r9
 800430e:	e7e7      	b.n	80042e0 <__ieee754_pow+0x1c0>
 8004310:	4b15      	ldr	r3, [pc, #84]	; (8004368 <__ieee754_pow+0x248>)
 8004312:	429e      	cmp	r6, r3
 8004314:	f340 80f6 	ble.w	8004504 <__ieee754_pow+0x3e4>
 8004318:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800431c:	429e      	cmp	r6, r3
 800431e:	4b10      	ldr	r3, [pc, #64]	; (8004360 <__ieee754_pow+0x240>)
 8004320:	dd09      	ble.n	8004336 <__ieee754_pow+0x216>
 8004322:	429c      	cmp	r4, r3
 8004324:	dc0c      	bgt.n	8004340 <__ieee754_pow+0x220>
 8004326:	2f00      	cmp	r7, #0
 8004328:	da0c      	bge.n	8004344 <__ieee754_pow+0x224>
 800432a:	2000      	movs	r0, #0
 800432c:	b013      	add	sp, #76	; 0x4c
 800432e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004332:	f000 bcb2 	b.w	8004c9a <__math_oflow>
 8004336:	429c      	cmp	r4, r3
 8004338:	dbf5      	blt.n	8004326 <__ieee754_pow+0x206>
 800433a:	4b08      	ldr	r3, [pc, #32]	; (800435c <__ieee754_pow+0x23c>)
 800433c:	429c      	cmp	r4, r3
 800433e:	dd15      	ble.n	800436c <__ieee754_pow+0x24c>
 8004340:	2f00      	cmp	r7, #0
 8004342:	dcf2      	bgt.n	800432a <__ieee754_pow+0x20a>
 8004344:	2000      	movs	r0, #0
 8004346:	b013      	add	sp, #76	; 0x4c
 8004348:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800434c:	f000 bca0 	b.w	8004c90 <__math_uflow>
 8004350:	fff00000 	.word	0xfff00000
 8004354:	7ff00000 	.word	0x7ff00000
 8004358:	433fffff 	.word	0x433fffff
 800435c:	3ff00000 	.word	0x3ff00000
 8004360:	3fefffff 	.word	0x3fefffff
 8004364:	3fe00000 	.word	0x3fe00000
 8004368:	41e00000 	.word	0x41e00000
 800436c:	4661      	mov	r1, ip
 800436e:	2200      	movs	r2, #0
 8004370:	4658      	mov	r0, fp
 8004372:	4b5f      	ldr	r3, [pc, #380]	; (80044f0 <__ieee754_pow+0x3d0>)
 8004374:	f7fb fef0 	bl	8000158 <__aeabi_dsub>
 8004378:	a355      	add	r3, pc, #340	; (adr r3, 80044d0 <__ieee754_pow+0x3b0>)
 800437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437e:	4604      	mov	r4, r0
 8004380:	460d      	mov	r5, r1
 8004382:	f7fc f8a1 	bl	80004c8 <__aeabi_dmul>
 8004386:	a354      	add	r3, pc, #336	; (adr r3, 80044d8 <__ieee754_pow+0x3b8>)
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	4606      	mov	r6, r0
 800438e:	460f      	mov	r7, r1
 8004390:	4620      	mov	r0, r4
 8004392:	4629      	mov	r1, r5
 8004394:	f7fc f898 	bl	80004c8 <__aeabi_dmul>
 8004398:	2200      	movs	r2, #0
 800439a:	4682      	mov	sl, r0
 800439c:	468b      	mov	fp, r1
 800439e:	4620      	mov	r0, r4
 80043a0:	4629      	mov	r1, r5
 80043a2:	4b54      	ldr	r3, [pc, #336]	; (80044f4 <__ieee754_pow+0x3d4>)
 80043a4:	f7fc f890 	bl	80004c8 <__aeabi_dmul>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	a14c      	add	r1, pc, #304	; (adr r1, 80044e0 <__ieee754_pow+0x3c0>)
 80043ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043b2:	f7fb fed1 	bl	8000158 <__aeabi_dsub>
 80043b6:	4622      	mov	r2, r4
 80043b8:	462b      	mov	r3, r5
 80043ba:	f7fc f885 	bl	80004c8 <__aeabi_dmul>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	2000      	movs	r0, #0
 80043c4:	494c      	ldr	r1, [pc, #304]	; (80044f8 <__ieee754_pow+0x3d8>)
 80043c6:	f7fb fec7 	bl	8000158 <__aeabi_dsub>
 80043ca:	4622      	mov	r2, r4
 80043cc:	462b      	mov	r3, r5
 80043ce:	4680      	mov	r8, r0
 80043d0:	4689      	mov	r9, r1
 80043d2:	4620      	mov	r0, r4
 80043d4:	4629      	mov	r1, r5
 80043d6:	f7fc f877 	bl	80004c8 <__aeabi_dmul>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4640      	mov	r0, r8
 80043e0:	4649      	mov	r1, r9
 80043e2:	f7fc f871 	bl	80004c8 <__aeabi_dmul>
 80043e6:	a340      	add	r3, pc, #256	; (adr r3, 80044e8 <__ieee754_pow+0x3c8>)
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f7fc f86c 	bl	80004c8 <__aeabi_dmul>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4650      	mov	r0, sl
 80043f6:	4659      	mov	r1, fp
 80043f8:	f7fb feae 	bl	8000158 <__aeabi_dsub>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4604      	mov	r4, r0
 8004402:	460d      	mov	r5, r1
 8004404:	4630      	mov	r0, r6
 8004406:	4639      	mov	r1, r7
 8004408:	f7fb fea8 	bl	800015c <__adddf3>
 800440c:	2000      	movs	r0, #0
 800440e:	4632      	mov	r2, r6
 8004410:	463b      	mov	r3, r7
 8004412:	4682      	mov	sl, r0
 8004414:	468b      	mov	fp, r1
 8004416:	f7fb fe9f 	bl	8000158 <__aeabi_dsub>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4620      	mov	r0, r4
 8004420:	4629      	mov	r1, r5
 8004422:	f7fb fe99 	bl	8000158 <__aeabi_dsub>
 8004426:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800442a:	9b00      	ldr	r3, [sp, #0]
 800442c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800442e:	3b01      	subs	r3, #1
 8004430:	4313      	orrs	r3, r2
 8004432:	f04f 0600 	mov.w	r6, #0
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	bf0c      	ite	eq
 800443c:	4b2f      	ldreq	r3, [pc, #188]	; (80044fc <__ieee754_pow+0x3dc>)
 800443e:	4b2c      	ldrne	r3, [pc, #176]	; (80044f0 <__ieee754_pow+0x3d0>)
 8004440:	4604      	mov	r4, r0
 8004442:	460d      	mov	r5, r1
 8004444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004448:	e9cd 2300 	strd	r2, r3, [sp]
 800444c:	4632      	mov	r2, r6
 800444e:	463b      	mov	r3, r7
 8004450:	f7fb fe82 	bl	8000158 <__aeabi_dsub>
 8004454:	4652      	mov	r2, sl
 8004456:	465b      	mov	r3, fp
 8004458:	f7fc f836 	bl	80004c8 <__aeabi_dmul>
 800445c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004460:	4680      	mov	r8, r0
 8004462:	4689      	mov	r9, r1
 8004464:	4620      	mov	r0, r4
 8004466:	4629      	mov	r1, r5
 8004468:	f7fc f82e 	bl	80004c8 <__aeabi_dmul>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4640      	mov	r0, r8
 8004472:	4649      	mov	r1, r9
 8004474:	f7fb fe72 	bl	800015c <__adddf3>
 8004478:	4632      	mov	r2, r6
 800447a:	463b      	mov	r3, r7
 800447c:	4680      	mov	r8, r0
 800447e:	4689      	mov	r9, r1
 8004480:	4650      	mov	r0, sl
 8004482:	4659      	mov	r1, fp
 8004484:	f7fc f820 	bl	80004c8 <__aeabi_dmul>
 8004488:	4604      	mov	r4, r0
 800448a:	460d      	mov	r5, r1
 800448c:	460b      	mov	r3, r1
 800448e:	4602      	mov	r2, r0
 8004490:	4649      	mov	r1, r9
 8004492:	4640      	mov	r0, r8
 8004494:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004498:	f7fb fe60 	bl	800015c <__adddf3>
 800449c:	4b18      	ldr	r3, [pc, #96]	; (8004500 <__ieee754_pow+0x3e0>)
 800449e:	4682      	mov	sl, r0
 80044a0:	4299      	cmp	r1, r3
 80044a2:	460f      	mov	r7, r1
 80044a4:	460e      	mov	r6, r1
 80044a6:	f340 82e7 	ble.w	8004a78 <__ieee754_pow+0x958>
 80044aa:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80044ae:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80044b2:	4303      	orrs	r3, r0
 80044b4:	f000 81e2 	beq.w	800487c <__ieee754_pow+0x75c>
 80044b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044bc:	2200      	movs	r2, #0
 80044be:	2300      	movs	r3, #0
 80044c0:	f7fc fa74 	bl	80009ac <__aeabi_dcmplt>
 80044c4:	3800      	subs	r0, #0
 80044c6:	bf18      	it	ne
 80044c8:	2001      	movne	r0, #1
 80044ca:	e72f      	b.n	800432c <__ieee754_pow+0x20c>
 80044cc:	f3af 8000 	nop.w
 80044d0:	60000000 	.word	0x60000000
 80044d4:	3ff71547 	.word	0x3ff71547
 80044d8:	f85ddf44 	.word	0xf85ddf44
 80044dc:	3e54ae0b 	.word	0x3e54ae0b
 80044e0:	55555555 	.word	0x55555555
 80044e4:	3fd55555 	.word	0x3fd55555
 80044e8:	652b82fe 	.word	0x652b82fe
 80044ec:	3ff71547 	.word	0x3ff71547
 80044f0:	3ff00000 	.word	0x3ff00000
 80044f4:	3fd00000 	.word	0x3fd00000
 80044f8:	3fe00000 	.word	0x3fe00000
 80044fc:	bff00000 	.word	0xbff00000
 8004500:	408fffff 	.word	0x408fffff
 8004504:	4bd4      	ldr	r3, [pc, #848]	; (8004858 <__ieee754_pow+0x738>)
 8004506:	2200      	movs	r2, #0
 8004508:	402b      	ands	r3, r5
 800450a:	b943      	cbnz	r3, 800451e <__ieee754_pow+0x3fe>
 800450c:	4658      	mov	r0, fp
 800450e:	4661      	mov	r1, ip
 8004510:	4bd2      	ldr	r3, [pc, #840]	; (800485c <__ieee754_pow+0x73c>)
 8004512:	f7fb ffd9 	bl	80004c8 <__aeabi_dmul>
 8004516:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800451a:	4683      	mov	fp, r0
 800451c:	460c      	mov	r4, r1
 800451e:	1523      	asrs	r3, r4, #20
 8004520:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004524:	4413      	add	r3, r2
 8004526:	930b      	str	r3, [sp, #44]	; 0x2c
 8004528:	4bcd      	ldr	r3, [pc, #820]	; (8004860 <__ieee754_pow+0x740>)
 800452a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800452e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004532:	429c      	cmp	r4, r3
 8004534:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004538:	dd08      	ble.n	800454c <__ieee754_pow+0x42c>
 800453a:	4bca      	ldr	r3, [pc, #808]	; (8004864 <__ieee754_pow+0x744>)
 800453c:	429c      	cmp	r4, r3
 800453e:	f340 8164 	ble.w	800480a <__ieee754_pow+0x6ea>
 8004542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004544:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004548:	3301      	adds	r3, #1
 800454a:	930b      	str	r3, [sp, #44]	; 0x2c
 800454c:	2600      	movs	r6, #0
 800454e:	00f3      	lsls	r3, r6, #3
 8004550:	930d      	str	r3, [sp, #52]	; 0x34
 8004552:	4bc5      	ldr	r3, [pc, #788]	; (8004868 <__ieee754_pow+0x748>)
 8004554:	4658      	mov	r0, fp
 8004556:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800455a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800455e:	4629      	mov	r1, r5
 8004560:	461a      	mov	r2, r3
 8004562:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004566:	4623      	mov	r3, r4
 8004568:	f7fb fdf6 	bl	8000158 <__aeabi_dsub>
 800456c:	46da      	mov	sl, fp
 800456e:	462b      	mov	r3, r5
 8004570:	4652      	mov	r2, sl
 8004572:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004576:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800457a:	f7fb fdef 	bl	800015c <__adddf3>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	2000      	movs	r0, #0
 8004584:	49b9      	ldr	r1, [pc, #740]	; (800486c <__ieee754_pow+0x74c>)
 8004586:	f7fc f8c9 	bl	800071c <__aeabi_ddiv>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004592:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004596:	f7fb ff97 	bl	80004c8 <__aeabi_dmul>
 800459a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800459e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80045a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80045a6:	2300      	movs	r3, #0
 80045a8:	2200      	movs	r2, #0
 80045aa:	46ab      	mov	fp, r5
 80045ac:	106d      	asrs	r5, r5, #1
 80045ae:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80045b2:	9304      	str	r3, [sp, #16]
 80045b4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80045b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80045bc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80045c0:	4640      	mov	r0, r8
 80045c2:	4649      	mov	r1, r9
 80045c4:	4614      	mov	r4, r2
 80045c6:	461d      	mov	r5, r3
 80045c8:	f7fb ff7e 	bl	80004c8 <__aeabi_dmul>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80045d4:	f7fb fdc0 	bl	8000158 <__aeabi_dsub>
 80045d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045dc:	4606      	mov	r6, r0
 80045de:	460f      	mov	r7, r1
 80045e0:	4620      	mov	r0, r4
 80045e2:	4629      	mov	r1, r5
 80045e4:	f7fb fdb8 	bl	8000158 <__aeabi_dsub>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4650      	mov	r0, sl
 80045ee:	4659      	mov	r1, fp
 80045f0:	f7fb fdb2 	bl	8000158 <__aeabi_dsub>
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	f7fb ff66 	bl	80004c8 <__aeabi_dmul>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4630      	mov	r0, r6
 8004602:	4639      	mov	r1, r7
 8004604:	f7fb fda8 	bl	8000158 <__aeabi_dsub>
 8004608:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800460c:	f7fb ff5c 	bl	80004c8 <__aeabi_dmul>
 8004610:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004614:	4682      	mov	sl, r0
 8004616:	468b      	mov	fp, r1
 8004618:	4610      	mov	r0, r2
 800461a:	4619      	mov	r1, r3
 800461c:	f7fb ff54 	bl	80004c8 <__aeabi_dmul>
 8004620:	a37b      	add	r3, pc, #492	; (adr r3, 8004810 <__ieee754_pow+0x6f0>)
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	4604      	mov	r4, r0
 8004628:	460d      	mov	r5, r1
 800462a:	f7fb ff4d 	bl	80004c8 <__aeabi_dmul>
 800462e:	a37a      	add	r3, pc, #488	; (adr r3, 8004818 <__ieee754_pow+0x6f8>)
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	f7fb fd92 	bl	800015c <__adddf3>
 8004638:	4622      	mov	r2, r4
 800463a:	462b      	mov	r3, r5
 800463c:	f7fb ff44 	bl	80004c8 <__aeabi_dmul>
 8004640:	a377      	add	r3, pc, #476	; (adr r3, 8004820 <__ieee754_pow+0x700>)
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	f7fb fd89 	bl	800015c <__adddf3>
 800464a:	4622      	mov	r2, r4
 800464c:	462b      	mov	r3, r5
 800464e:	f7fb ff3b 	bl	80004c8 <__aeabi_dmul>
 8004652:	a375      	add	r3, pc, #468	; (adr r3, 8004828 <__ieee754_pow+0x708>)
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f7fb fd80 	bl	800015c <__adddf3>
 800465c:	4622      	mov	r2, r4
 800465e:	462b      	mov	r3, r5
 8004660:	f7fb ff32 	bl	80004c8 <__aeabi_dmul>
 8004664:	a372      	add	r3, pc, #456	; (adr r3, 8004830 <__ieee754_pow+0x710>)
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	f7fb fd77 	bl	800015c <__adddf3>
 800466e:	4622      	mov	r2, r4
 8004670:	462b      	mov	r3, r5
 8004672:	f7fb ff29 	bl	80004c8 <__aeabi_dmul>
 8004676:	a370      	add	r3, pc, #448	; (adr r3, 8004838 <__ieee754_pow+0x718>)
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f7fb fd6e 	bl	800015c <__adddf3>
 8004680:	4622      	mov	r2, r4
 8004682:	4606      	mov	r6, r0
 8004684:	460f      	mov	r7, r1
 8004686:	462b      	mov	r3, r5
 8004688:	4620      	mov	r0, r4
 800468a:	4629      	mov	r1, r5
 800468c:	f7fb ff1c 	bl	80004c8 <__aeabi_dmul>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4630      	mov	r0, r6
 8004696:	4639      	mov	r1, r7
 8004698:	f7fb ff16 	bl	80004c8 <__aeabi_dmul>
 800469c:	4604      	mov	r4, r0
 800469e:	460d      	mov	r5, r1
 80046a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046a4:	4642      	mov	r2, r8
 80046a6:	464b      	mov	r3, r9
 80046a8:	f7fb fd58 	bl	800015c <__adddf3>
 80046ac:	4652      	mov	r2, sl
 80046ae:	465b      	mov	r3, fp
 80046b0:	f7fb ff0a 	bl	80004c8 <__aeabi_dmul>
 80046b4:	4622      	mov	r2, r4
 80046b6:	462b      	mov	r3, r5
 80046b8:	f7fb fd50 	bl	800015c <__adddf3>
 80046bc:	4642      	mov	r2, r8
 80046be:	4606      	mov	r6, r0
 80046c0:	460f      	mov	r7, r1
 80046c2:	464b      	mov	r3, r9
 80046c4:	4640      	mov	r0, r8
 80046c6:	4649      	mov	r1, r9
 80046c8:	f7fb fefe 	bl	80004c8 <__aeabi_dmul>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80046d4:	2200      	movs	r2, #0
 80046d6:	4b66      	ldr	r3, [pc, #408]	; (8004870 <__ieee754_pow+0x750>)
 80046d8:	f7fb fd40 	bl	800015c <__adddf3>
 80046dc:	4632      	mov	r2, r6
 80046de:	463b      	mov	r3, r7
 80046e0:	f7fb fd3c 	bl	800015c <__adddf3>
 80046e4:	2400      	movs	r4, #0
 80046e6:	460d      	mov	r5, r1
 80046e8:	4622      	mov	r2, r4
 80046ea:	460b      	mov	r3, r1
 80046ec:	4640      	mov	r0, r8
 80046ee:	4649      	mov	r1, r9
 80046f0:	f7fb feea 	bl	80004c8 <__aeabi_dmul>
 80046f4:	2200      	movs	r2, #0
 80046f6:	4680      	mov	r8, r0
 80046f8:	4689      	mov	r9, r1
 80046fa:	4620      	mov	r0, r4
 80046fc:	4629      	mov	r1, r5
 80046fe:	4b5c      	ldr	r3, [pc, #368]	; (8004870 <__ieee754_pow+0x750>)
 8004700:	f7fb fd2a 	bl	8000158 <__aeabi_dsub>
 8004704:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004708:	f7fb fd26 	bl	8000158 <__aeabi_dsub>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4630      	mov	r0, r6
 8004712:	4639      	mov	r1, r7
 8004714:	f7fb fd20 	bl	8000158 <__aeabi_dsub>
 8004718:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800471c:	f7fb fed4 	bl	80004c8 <__aeabi_dmul>
 8004720:	4622      	mov	r2, r4
 8004722:	4606      	mov	r6, r0
 8004724:	460f      	mov	r7, r1
 8004726:	462b      	mov	r3, r5
 8004728:	4650      	mov	r0, sl
 800472a:	4659      	mov	r1, fp
 800472c:	f7fb fecc 	bl	80004c8 <__aeabi_dmul>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4630      	mov	r0, r6
 8004736:	4639      	mov	r1, r7
 8004738:	f7fb fd10 	bl	800015c <__adddf3>
 800473c:	2400      	movs	r4, #0
 800473e:	4606      	mov	r6, r0
 8004740:	460f      	mov	r7, r1
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4640      	mov	r0, r8
 8004748:	4649      	mov	r1, r9
 800474a:	f7fb fd07 	bl	800015c <__adddf3>
 800474e:	a33c      	add	r3, pc, #240	; (adr r3, 8004840 <__ieee754_pow+0x720>)
 8004750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004754:	4620      	mov	r0, r4
 8004756:	460d      	mov	r5, r1
 8004758:	f7fb feb6 	bl	80004c8 <__aeabi_dmul>
 800475c:	4642      	mov	r2, r8
 800475e:	464b      	mov	r3, r9
 8004760:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004764:	4620      	mov	r0, r4
 8004766:	4629      	mov	r1, r5
 8004768:	f7fb fcf6 	bl	8000158 <__aeabi_dsub>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4630      	mov	r0, r6
 8004772:	4639      	mov	r1, r7
 8004774:	f7fb fcf0 	bl	8000158 <__aeabi_dsub>
 8004778:	a333      	add	r3, pc, #204	; (adr r3, 8004848 <__ieee754_pow+0x728>)
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	f7fb fea3 	bl	80004c8 <__aeabi_dmul>
 8004782:	a333      	add	r3, pc, #204	; (adr r3, 8004850 <__ieee754_pow+0x730>)
 8004784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004788:	4606      	mov	r6, r0
 800478a:	460f      	mov	r7, r1
 800478c:	4620      	mov	r0, r4
 800478e:	4629      	mov	r1, r5
 8004790:	f7fb fe9a 	bl	80004c8 <__aeabi_dmul>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4630      	mov	r0, r6
 800479a:	4639      	mov	r1, r7
 800479c:	f7fb fcde 	bl	800015c <__adddf3>
 80047a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80047a2:	4b34      	ldr	r3, [pc, #208]	; (8004874 <__ieee754_pow+0x754>)
 80047a4:	4413      	add	r3, r2
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	f7fb fcd7 	bl	800015c <__adddf3>
 80047ae:	4680      	mov	r8, r0
 80047b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80047b2:	4689      	mov	r9, r1
 80047b4:	f7fb fe1e 	bl	80003f4 <__aeabi_i2d>
 80047b8:	4604      	mov	r4, r0
 80047ba:	460d      	mov	r5, r1
 80047bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80047c2:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <__ieee754_pow+0x758>)
 80047c4:	4413      	add	r3, r2
 80047c6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80047ca:	4642      	mov	r2, r8
 80047cc:	464b      	mov	r3, r9
 80047ce:	f7fb fcc5 	bl	800015c <__adddf3>
 80047d2:	4632      	mov	r2, r6
 80047d4:	463b      	mov	r3, r7
 80047d6:	f7fb fcc1 	bl	800015c <__adddf3>
 80047da:	4622      	mov	r2, r4
 80047dc:	462b      	mov	r3, r5
 80047de:	f7fb fcbd 	bl	800015c <__adddf3>
 80047e2:	2000      	movs	r0, #0
 80047e4:	4622      	mov	r2, r4
 80047e6:	462b      	mov	r3, r5
 80047e8:	4682      	mov	sl, r0
 80047ea:	468b      	mov	fp, r1
 80047ec:	f7fb fcb4 	bl	8000158 <__aeabi_dsub>
 80047f0:	4632      	mov	r2, r6
 80047f2:	463b      	mov	r3, r7
 80047f4:	f7fb fcb0 	bl	8000158 <__aeabi_dsub>
 80047f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80047fc:	f7fb fcac 	bl	8000158 <__aeabi_dsub>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4640      	mov	r0, r8
 8004806:	4649      	mov	r1, r9
 8004808:	e60b      	b.n	8004422 <__ieee754_pow+0x302>
 800480a:	2601      	movs	r6, #1
 800480c:	e69f      	b.n	800454e <__ieee754_pow+0x42e>
 800480e:	bf00      	nop
 8004810:	4a454eef 	.word	0x4a454eef
 8004814:	3fca7e28 	.word	0x3fca7e28
 8004818:	93c9db65 	.word	0x93c9db65
 800481c:	3fcd864a 	.word	0x3fcd864a
 8004820:	a91d4101 	.word	0xa91d4101
 8004824:	3fd17460 	.word	0x3fd17460
 8004828:	518f264d 	.word	0x518f264d
 800482c:	3fd55555 	.word	0x3fd55555
 8004830:	db6fabff 	.word	0xdb6fabff
 8004834:	3fdb6db6 	.word	0x3fdb6db6
 8004838:	33333303 	.word	0x33333303
 800483c:	3fe33333 	.word	0x3fe33333
 8004840:	e0000000 	.word	0xe0000000
 8004844:	3feec709 	.word	0x3feec709
 8004848:	dc3a03fd 	.word	0xdc3a03fd
 800484c:	3feec709 	.word	0x3feec709
 8004850:	145b01f5 	.word	0x145b01f5
 8004854:	be3e2fe0 	.word	0xbe3e2fe0
 8004858:	7ff00000 	.word	0x7ff00000
 800485c:	43400000 	.word	0x43400000
 8004860:	0003988e 	.word	0x0003988e
 8004864:	000bb679 	.word	0x000bb679
 8004868:	08004f20 	.word	0x08004f20
 800486c:	3ff00000 	.word	0x3ff00000
 8004870:	40080000 	.word	0x40080000
 8004874:	08004f40 	.word	0x08004f40
 8004878:	08004f30 	.word	0x08004f30
 800487c:	a39c      	add	r3, pc, #624	; (adr r3, 8004af0 <__ieee754_pow+0x9d0>)
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	4640      	mov	r0, r8
 8004884:	4649      	mov	r1, r9
 8004886:	f7fb fc69 	bl	800015c <__adddf3>
 800488a:	4622      	mov	r2, r4
 800488c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004890:	462b      	mov	r3, r5
 8004892:	4650      	mov	r0, sl
 8004894:	4639      	mov	r1, r7
 8004896:	f7fb fc5f 	bl	8000158 <__aeabi_dsub>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048a2:	f7fc f8a1 	bl	80009e8 <__aeabi_dcmpgt>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	f47f ae06 	bne.w	80044b8 <__ieee754_pow+0x398>
 80048ac:	4aa2      	ldr	r2, [pc, #648]	; (8004b38 <__ieee754_pow+0xa18>)
 80048ae:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80048b2:	4293      	cmp	r3, r2
 80048b4:	f340 8100 	ble.w	8004ab8 <__ieee754_pow+0x998>
 80048b8:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80048bc:	151b      	asrs	r3, r3, #20
 80048be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80048c2:	fa4a fa03 	asr.w	sl, sl, r3
 80048c6:	44b2      	add	sl, r6
 80048c8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80048cc:	489b      	ldr	r0, [pc, #620]	; (8004b3c <__ieee754_pow+0xa1c>)
 80048ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80048d2:	4108      	asrs	r0, r1
 80048d4:	ea00 030a 	and.w	r3, r0, sl
 80048d8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80048dc:	f1c1 0114 	rsb	r1, r1, #20
 80048e0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80048e4:	fa4a fa01 	asr.w	sl, sl, r1
 80048e8:	2e00      	cmp	r6, #0
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	4620      	mov	r0, r4
 80048f0:	4629      	mov	r1, r5
 80048f2:	bfb8      	it	lt
 80048f4:	f1ca 0a00 	rsblt	sl, sl, #0
 80048f8:	f7fb fc2e 	bl	8000158 <__aeabi_dsub>
 80048fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004904:	2400      	movs	r4, #0
 8004906:	4642      	mov	r2, r8
 8004908:	464b      	mov	r3, r9
 800490a:	f7fb fc27 	bl	800015c <__adddf3>
 800490e:	a37a      	add	r3, pc, #488	; (adr r3, 8004af8 <__ieee754_pow+0x9d8>)
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	4620      	mov	r0, r4
 8004916:	460d      	mov	r5, r1
 8004918:	f7fb fdd6 	bl	80004c8 <__aeabi_dmul>
 800491c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004920:	4606      	mov	r6, r0
 8004922:	460f      	mov	r7, r1
 8004924:	4620      	mov	r0, r4
 8004926:	4629      	mov	r1, r5
 8004928:	f7fb fc16 	bl	8000158 <__aeabi_dsub>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4640      	mov	r0, r8
 8004932:	4649      	mov	r1, r9
 8004934:	f7fb fc10 	bl	8000158 <__aeabi_dsub>
 8004938:	a371      	add	r3, pc, #452	; (adr r3, 8004b00 <__ieee754_pow+0x9e0>)
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	f7fb fdc3 	bl	80004c8 <__aeabi_dmul>
 8004942:	a371      	add	r3, pc, #452	; (adr r3, 8004b08 <__ieee754_pow+0x9e8>)
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	4680      	mov	r8, r0
 800494a:	4689      	mov	r9, r1
 800494c:	4620      	mov	r0, r4
 800494e:	4629      	mov	r1, r5
 8004950:	f7fb fdba 	bl	80004c8 <__aeabi_dmul>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4640      	mov	r0, r8
 800495a:	4649      	mov	r1, r9
 800495c:	f7fb fbfe 	bl	800015c <__adddf3>
 8004960:	4604      	mov	r4, r0
 8004962:	460d      	mov	r5, r1
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4630      	mov	r0, r6
 800496a:	4639      	mov	r1, r7
 800496c:	f7fb fbf6 	bl	800015c <__adddf3>
 8004970:	4632      	mov	r2, r6
 8004972:	463b      	mov	r3, r7
 8004974:	4680      	mov	r8, r0
 8004976:	4689      	mov	r9, r1
 8004978:	f7fb fbee 	bl	8000158 <__aeabi_dsub>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4620      	mov	r0, r4
 8004982:	4629      	mov	r1, r5
 8004984:	f7fb fbe8 	bl	8000158 <__aeabi_dsub>
 8004988:	4642      	mov	r2, r8
 800498a:	4606      	mov	r6, r0
 800498c:	460f      	mov	r7, r1
 800498e:	464b      	mov	r3, r9
 8004990:	4640      	mov	r0, r8
 8004992:	4649      	mov	r1, r9
 8004994:	f7fb fd98 	bl	80004c8 <__aeabi_dmul>
 8004998:	a35d      	add	r3, pc, #372	; (adr r3, 8004b10 <__ieee754_pow+0x9f0>)
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	4604      	mov	r4, r0
 80049a0:	460d      	mov	r5, r1
 80049a2:	f7fb fd91 	bl	80004c8 <__aeabi_dmul>
 80049a6:	a35c      	add	r3, pc, #368	; (adr r3, 8004b18 <__ieee754_pow+0x9f8>)
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	f7fb fbd4 	bl	8000158 <__aeabi_dsub>
 80049b0:	4622      	mov	r2, r4
 80049b2:	462b      	mov	r3, r5
 80049b4:	f7fb fd88 	bl	80004c8 <__aeabi_dmul>
 80049b8:	a359      	add	r3, pc, #356	; (adr r3, 8004b20 <__ieee754_pow+0xa00>)
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	f7fb fbcd 	bl	800015c <__adddf3>
 80049c2:	4622      	mov	r2, r4
 80049c4:	462b      	mov	r3, r5
 80049c6:	f7fb fd7f 	bl	80004c8 <__aeabi_dmul>
 80049ca:	a357      	add	r3, pc, #348	; (adr r3, 8004b28 <__ieee754_pow+0xa08>)
 80049cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d0:	f7fb fbc2 	bl	8000158 <__aeabi_dsub>
 80049d4:	4622      	mov	r2, r4
 80049d6:	462b      	mov	r3, r5
 80049d8:	f7fb fd76 	bl	80004c8 <__aeabi_dmul>
 80049dc:	a354      	add	r3, pc, #336	; (adr r3, 8004b30 <__ieee754_pow+0xa10>)
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	f7fb fbbb 	bl	800015c <__adddf3>
 80049e6:	4622      	mov	r2, r4
 80049e8:	462b      	mov	r3, r5
 80049ea:	f7fb fd6d 	bl	80004c8 <__aeabi_dmul>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4640      	mov	r0, r8
 80049f4:	4649      	mov	r1, r9
 80049f6:	f7fb fbaf 	bl	8000158 <__aeabi_dsub>
 80049fa:	4604      	mov	r4, r0
 80049fc:	460d      	mov	r5, r1
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4640      	mov	r0, r8
 8004a04:	4649      	mov	r1, r9
 8004a06:	f7fb fd5f 	bl	80004c8 <__aeabi_dmul>
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a14:	4620      	mov	r0, r4
 8004a16:	4629      	mov	r1, r5
 8004a18:	f7fb fb9e 	bl	8000158 <__aeabi_dsub>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a24:	f7fb fe7a 	bl	800071c <__aeabi_ddiv>
 8004a28:	4632      	mov	r2, r6
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	460d      	mov	r5, r1
 8004a2e:	463b      	mov	r3, r7
 8004a30:	4640      	mov	r0, r8
 8004a32:	4649      	mov	r1, r9
 8004a34:	f7fb fd48 	bl	80004c8 <__aeabi_dmul>
 8004a38:	4632      	mov	r2, r6
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	f7fb fb8e 	bl	800015c <__adddf3>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4620      	mov	r0, r4
 8004a46:	4629      	mov	r1, r5
 8004a48:	f7fb fb86 	bl	8000158 <__aeabi_dsub>
 8004a4c:	4642      	mov	r2, r8
 8004a4e:	464b      	mov	r3, r9
 8004a50:	f7fb fb82 	bl	8000158 <__aeabi_dsub>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	2000      	movs	r0, #0
 8004a5a:	4939      	ldr	r1, [pc, #228]	; (8004b40 <__ieee754_pow+0xa20>)
 8004a5c:	f7fb fb7c 	bl	8000158 <__aeabi_dsub>
 8004a60:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004a64:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004a68:	da29      	bge.n	8004abe <__ieee754_pow+0x99e>
 8004a6a:	4652      	mov	r2, sl
 8004a6c:	f000 f874 	bl	8004b58 <scalbn>
 8004a70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a74:	f7ff bbfd 	b.w	8004272 <__ieee754_pow+0x152>
 8004a78:	4b32      	ldr	r3, [pc, #200]	; (8004b44 <__ieee754_pow+0xa24>)
 8004a7a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8004a7e:	429f      	cmp	r7, r3
 8004a80:	f77f af14 	ble.w	80048ac <__ieee754_pow+0x78c>
 8004a84:	4b30      	ldr	r3, [pc, #192]	; (8004b48 <__ieee754_pow+0xa28>)
 8004a86:	440b      	add	r3, r1
 8004a88:	4303      	orrs	r3, r0
 8004a8a:	d009      	beq.n	8004aa0 <__ieee754_pow+0x980>
 8004a8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a90:	2200      	movs	r2, #0
 8004a92:	2300      	movs	r3, #0
 8004a94:	f7fb ff8a 	bl	80009ac <__aeabi_dcmplt>
 8004a98:	3800      	subs	r0, #0
 8004a9a:	bf18      	it	ne
 8004a9c:	2001      	movne	r0, #1
 8004a9e:	e452      	b.n	8004346 <__ieee754_pow+0x226>
 8004aa0:	4622      	mov	r2, r4
 8004aa2:	462b      	mov	r3, r5
 8004aa4:	f7fb fb58 	bl	8000158 <__aeabi_dsub>
 8004aa8:	4642      	mov	r2, r8
 8004aaa:	464b      	mov	r3, r9
 8004aac:	f7fb ff92 	bl	80009d4 <__aeabi_dcmpge>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	f43f aefb 	beq.w	80048ac <__ieee754_pow+0x78c>
 8004ab6:	e7e9      	b.n	8004a8c <__ieee754_pow+0x96c>
 8004ab8:	f04f 0a00 	mov.w	sl, #0
 8004abc:	e720      	b.n	8004900 <__ieee754_pow+0x7e0>
 8004abe:	4621      	mov	r1, r4
 8004ac0:	e7d6      	b.n	8004a70 <__ieee754_pow+0x950>
 8004ac2:	f04f 0b00 	mov.w	fp, #0
 8004ac6:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004b40 <__ieee754_pow+0xa20>
 8004aca:	f7ff bbb9 	b.w	8004240 <__ieee754_pow+0x120>
 8004ace:	f04f 0b00 	mov.w	fp, #0
 8004ad2:	f04f 0c00 	mov.w	ip, #0
 8004ad6:	f7ff bbb3 	b.w	8004240 <__ieee754_pow+0x120>
 8004ada:	4640      	mov	r0, r8
 8004adc:	4649      	mov	r1, r9
 8004ade:	f7ff bb3c 	b.w	800415a <__ieee754_pow+0x3a>
 8004ae2:	9200      	str	r2, [sp, #0]
 8004ae4:	f7ff bb88 	b.w	80041f8 <__ieee754_pow+0xd8>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f7ff bb72 	b.w	80041d2 <__ieee754_pow+0xb2>
 8004aee:	bf00      	nop
 8004af0:	652b82fe 	.word	0x652b82fe
 8004af4:	3c971547 	.word	0x3c971547
 8004af8:	00000000 	.word	0x00000000
 8004afc:	3fe62e43 	.word	0x3fe62e43
 8004b00:	fefa39ef 	.word	0xfefa39ef
 8004b04:	3fe62e42 	.word	0x3fe62e42
 8004b08:	0ca86c39 	.word	0x0ca86c39
 8004b0c:	be205c61 	.word	0xbe205c61
 8004b10:	72bea4d0 	.word	0x72bea4d0
 8004b14:	3e663769 	.word	0x3e663769
 8004b18:	c5d26bf1 	.word	0xc5d26bf1
 8004b1c:	3ebbbd41 	.word	0x3ebbbd41
 8004b20:	af25de2c 	.word	0xaf25de2c
 8004b24:	3f11566a 	.word	0x3f11566a
 8004b28:	16bebd93 	.word	0x16bebd93
 8004b2c:	3f66c16c 	.word	0x3f66c16c
 8004b30:	5555553e 	.word	0x5555553e
 8004b34:	3fc55555 	.word	0x3fc55555
 8004b38:	3fe00000 	.word	0x3fe00000
 8004b3c:	fff00000 	.word	0xfff00000
 8004b40:	3ff00000 	.word	0x3ff00000
 8004b44:	4090cbff 	.word	0x4090cbff
 8004b48:	3f6f3400 	.word	0x3f6f3400

08004b4c <fabs>:
 8004b4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b50:	4619      	mov	r1, r3
 8004b52:	4770      	bx	lr
 8004b54:	0000      	movs	r0, r0
	...

08004b58 <scalbn>:
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	4616      	mov	r6, r2
 8004b5c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004b60:	4604      	mov	r4, r0
 8004b62:	460d      	mov	r5, r1
 8004b64:	460b      	mov	r3, r1
 8004b66:	b992      	cbnz	r2, 8004b8e <scalbn+0x36>
 8004b68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b6c:	4303      	orrs	r3, r0
 8004b6e:	d03c      	beq.n	8004bea <scalbn+0x92>
 8004b70:	4b31      	ldr	r3, [pc, #196]	; (8004c38 <scalbn+0xe0>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	f7fb fca8 	bl	80004c8 <__aeabi_dmul>
 8004b78:	4b30      	ldr	r3, [pc, #192]	; (8004c3c <scalbn+0xe4>)
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	429e      	cmp	r6, r3
 8004b7e:	460d      	mov	r5, r1
 8004b80:	da0f      	bge.n	8004ba2 <scalbn+0x4a>
 8004b82:	a329      	add	r3, pc, #164	; (adr r3, 8004c28 <scalbn+0xd0>)
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	f7fb fc9e 	bl	80004c8 <__aeabi_dmul>
 8004b8c:	e006      	b.n	8004b9c <scalbn+0x44>
 8004b8e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8004b92:	42ba      	cmp	r2, r7
 8004b94:	d109      	bne.n	8004baa <scalbn+0x52>
 8004b96:	4602      	mov	r2, r0
 8004b98:	f7fb fae0 	bl	800015c <__adddf3>
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	460d      	mov	r5, r1
 8004ba0:	e023      	b.n	8004bea <scalbn+0x92>
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004ba8:	3a36      	subs	r2, #54	; 0x36
 8004baa:	f24c 3150 	movw	r1, #50000	; 0xc350
 8004bae:	428e      	cmp	r6, r1
 8004bb0:	dd0e      	ble.n	8004bd0 <scalbn+0x78>
 8004bb2:	a31f      	add	r3, pc, #124	; (adr r3, 8004c30 <scalbn+0xd8>)
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004bbc:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8004bc0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004bc4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004bc8:	481d      	ldr	r0, [pc, #116]	; (8004c40 <scalbn+0xe8>)
 8004bca:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8004bce:	e7db      	b.n	8004b88 <scalbn+0x30>
 8004bd0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004bd4:	4432      	add	r2, r6
 8004bd6:	428a      	cmp	r2, r1
 8004bd8:	dceb      	bgt.n	8004bb2 <scalbn+0x5a>
 8004bda:	2a00      	cmp	r2, #0
 8004bdc:	dd08      	ble.n	8004bf0 <scalbn+0x98>
 8004bde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004be2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004be6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004bea:	4620      	mov	r0, r4
 8004bec:	4629      	mov	r1, r5
 8004bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bf0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004bf4:	da0c      	bge.n	8004c10 <scalbn+0xb8>
 8004bf6:	a30c      	add	r3, pc, #48	; (adr r3, 8004c28 <scalbn+0xd0>)
 8004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004c00:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8004c04:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8004c08:	480e      	ldr	r0, [pc, #56]	; (8004c44 <scalbn+0xec>)
 8004c0a:	f041 011f 	orr.w	r1, r1, #31
 8004c0e:	e7bb      	b.n	8004b88 <scalbn+0x30>
 8004c10:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004c14:	3236      	adds	r2, #54	; 0x36
 8004c16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004c1e:	4620      	mov	r0, r4
 8004c20:	4629      	mov	r1, r5
 8004c22:	2200      	movs	r2, #0
 8004c24:	4b08      	ldr	r3, [pc, #32]	; (8004c48 <scalbn+0xf0>)
 8004c26:	e7af      	b.n	8004b88 <scalbn+0x30>
 8004c28:	c2f8f359 	.word	0xc2f8f359
 8004c2c:	01a56e1f 	.word	0x01a56e1f
 8004c30:	8800759c 	.word	0x8800759c
 8004c34:	7e37e43c 	.word	0x7e37e43c
 8004c38:	43500000 	.word	0x43500000
 8004c3c:	ffff3cb0 	.word	0xffff3cb0
 8004c40:	8800759c 	.word	0x8800759c
 8004c44:	c2f8f359 	.word	0xc2f8f359
 8004c48:	3c900000 	.word	0x3c900000

08004c4c <with_errno>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	4604      	mov	r4, r0
 8004c50:	460d      	mov	r5, r1
 8004c52:	4616      	mov	r6, r2
 8004c54:	f7fe fc1c 	bl	8003490 <__errno>
 8004c58:	4629      	mov	r1, r5
 8004c5a:	6006      	str	r6, [r0, #0]
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}

08004c60 <xflow>:
 8004c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c62:	4615      	mov	r5, r2
 8004c64:	461c      	mov	r4, r3
 8004c66:	b180      	cbz	r0, 8004c8a <xflow+0x2a>
 8004c68:	4610      	mov	r0, r2
 8004c6a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004c6e:	e9cd 0100 	strd	r0, r1, [sp]
 8004c72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c76:	4628      	mov	r0, r5
 8004c78:	4621      	mov	r1, r4
 8004c7a:	f7fb fc25 	bl	80004c8 <__aeabi_dmul>
 8004c7e:	2222      	movs	r2, #34	; 0x22
 8004c80:	b003      	add	sp, #12
 8004c82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c86:	f7ff bfe1 	b.w	8004c4c <with_errno>
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	e7ee      	b.n	8004c6e <xflow+0xe>

08004c90 <__math_uflow>:
 8004c90:	2200      	movs	r2, #0
 8004c92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004c96:	f7ff bfe3 	b.w	8004c60 <xflow>

08004c9a <__math_oflow>:
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004ca0:	f7ff bfde 	b.w	8004c60 <xflow>

08004ca4 <__ieee754_sqrt>:
 8004ca4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8004e48 <__ieee754_sqrt+0x1a4>
 8004ca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cac:	ea3c 0c01 	bics.w	ip, ip, r1
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	4606      	mov	r6, r0
 8004cb4:	460d      	mov	r5, r1
 8004cb6:	460a      	mov	r2, r1
 8004cb8:	4604      	mov	r4, r0
 8004cba:	d10e      	bne.n	8004cda <__ieee754_sqrt+0x36>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	f7fb fc03 	bl	80004c8 <__aeabi_dmul>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	4629      	mov	r1, r5
 8004cca:	f7fb fa47 	bl	800015c <__adddf3>
 8004cce:	4606      	mov	r6, r0
 8004cd0:	460d      	mov	r5, r1
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cda:	2900      	cmp	r1, #0
 8004cdc:	dc0d      	bgt.n	8004cfa <__ieee754_sqrt+0x56>
 8004cde:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8004ce2:	ea5c 0c00 	orrs.w	ip, ip, r0
 8004ce6:	d0f4      	beq.n	8004cd2 <__ieee754_sqrt+0x2e>
 8004ce8:	b139      	cbz	r1, 8004cfa <__ieee754_sqrt+0x56>
 8004cea:	4602      	mov	r2, r0
 8004cec:	f7fb fa34 	bl	8000158 <__aeabi_dsub>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	f7fb fd12 	bl	800071c <__aeabi_ddiv>
 8004cf8:	e7e9      	b.n	8004cce <__ieee754_sqrt+0x2a>
 8004cfa:	1512      	asrs	r2, r2, #20
 8004cfc:	f000 8089 	beq.w	8004e12 <__ieee754_sqrt+0x16e>
 8004d00:	2500      	movs	r5, #0
 8004d02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d06:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d0e:	07d2      	lsls	r2, r2, #31
 8004d10:	bf5c      	itt	pl
 8004d12:	005b      	lslpl	r3, r3, #1
 8004d14:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8004d18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d1c:	bf58      	it	pl
 8004d1e:	0064      	lslpl	r4, r4, #1
 8004d20:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004d24:	0062      	lsls	r2, r4, #1
 8004d26:	2016      	movs	r0, #22
 8004d28:	4629      	mov	r1, r5
 8004d2a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8004d2e:	1076      	asrs	r6, r6, #1
 8004d30:	190f      	adds	r7, r1, r4
 8004d32:	429f      	cmp	r7, r3
 8004d34:	bfde      	ittt	le
 8004d36:	1bdb      	suble	r3, r3, r7
 8004d38:	1939      	addle	r1, r7, r4
 8004d3a:	192d      	addle	r5, r5, r4
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	3801      	subs	r0, #1
 8004d40:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004d44:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004d48:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004d4c:	d1f0      	bne.n	8004d30 <__ieee754_sqrt+0x8c>
 8004d4e:	4604      	mov	r4, r0
 8004d50:	2720      	movs	r7, #32
 8004d52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004d56:	428b      	cmp	r3, r1
 8004d58:	eb0c 0e00 	add.w	lr, ip, r0
 8004d5c:	dc02      	bgt.n	8004d64 <__ieee754_sqrt+0xc0>
 8004d5e:	d113      	bne.n	8004d88 <__ieee754_sqrt+0xe4>
 8004d60:	4596      	cmp	lr, r2
 8004d62:	d811      	bhi.n	8004d88 <__ieee754_sqrt+0xe4>
 8004d64:	f1be 0f00 	cmp.w	lr, #0
 8004d68:	eb0e 000c 	add.w	r0, lr, ip
 8004d6c:	da56      	bge.n	8004e1c <__ieee754_sqrt+0x178>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	db54      	blt.n	8004e1c <__ieee754_sqrt+0x178>
 8004d72:	f101 0801 	add.w	r8, r1, #1
 8004d76:	1a5b      	subs	r3, r3, r1
 8004d78:	4641      	mov	r1, r8
 8004d7a:	4596      	cmp	lr, r2
 8004d7c:	bf88      	it	hi
 8004d7e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8004d82:	eba2 020e 	sub.w	r2, r2, lr
 8004d86:	4464      	add	r4, ip
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	3f01      	subs	r7, #1
 8004d8c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004d90:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004d94:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004d98:	d1dd      	bne.n	8004d56 <__ieee754_sqrt+0xb2>
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	d01b      	beq.n	8004dd6 <__ieee754_sqrt+0x132>
 8004d9e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004e4c <__ieee754_sqrt+0x1a8>
 8004da2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004e50 <__ieee754_sqrt+0x1ac>
 8004da6:	e9da 0100 	ldrd	r0, r1, [sl]
 8004daa:	e9db 2300 	ldrd	r2, r3, [fp]
 8004dae:	f7fb f9d3 	bl	8000158 <__aeabi_dsub>
 8004db2:	e9da 8900 	ldrd	r8, r9, [sl]
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4640      	mov	r0, r8
 8004dbc:	4649      	mov	r1, r9
 8004dbe:	f7fb fdff 	bl	80009c0 <__aeabi_dcmple>
 8004dc2:	b140      	cbz	r0, 8004dd6 <__ieee754_sqrt+0x132>
 8004dc4:	e9da 0100 	ldrd	r0, r1, [sl]
 8004dc8:	e9db 2300 	ldrd	r2, r3, [fp]
 8004dcc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004dd0:	d126      	bne.n	8004e20 <__ieee754_sqrt+0x17c>
 8004dd2:	463c      	mov	r4, r7
 8004dd4:	3501      	adds	r5, #1
 8004dd6:	106b      	asrs	r3, r5, #1
 8004dd8:	0864      	lsrs	r4, r4, #1
 8004dda:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004dde:	07ea      	lsls	r2, r5, #31
 8004de0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004de4:	bf48      	it	mi
 8004de6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8004dea:	4620      	mov	r0, r4
 8004dec:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8004df0:	e76d      	b.n	8004cce <__ieee754_sqrt+0x2a>
 8004df2:	0ae3      	lsrs	r3, r4, #11
 8004df4:	3915      	subs	r1, #21
 8004df6:	0564      	lsls	r4, r4, #21
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0fa      	beq.n	8004df2 <__ieee754_sqrt+0x14e>
 8004dfc:	02d8      	lsls	r0, r3, #11
 8004dfe:	d50a      	bpl.n	8004e16 <__ieee754_sqrt+0x172>
 8004e00:	f1c2 0020 	rsb	r0, r2, #32
 8004e04:	fa24 f000 	lsr.w	r0, r4, r0
 8004e08:	1e55      	subs	r5, r2, #1
 8004e0a:	4094      	lsls	r4, r2
 8004e0c:	4303      	orrs	r3, r0
 8004e0e:	1b4a      	subs	r2, r1, r5
 8004e10:	e776      	b.n	8004d00 <__ieee754_sqrt+0x5c>
 8004e12:	4611      	mov	r1, r2
 8004e14:	e7f0      	b.n	8004df8 <__ieee754_sqrt+0x154>
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	3201      	adds	r2, #1
 8004e1a:	e7ef      	b.n	8004dfc <__ieee754_sqrt+0x158>
 8004e1c:	4688      	mov	r8, r1
 8004e1e:	e7aa      	b.n	8004d76 <__ieee754_sqrt+0xd2>
 8004e20:	f7fb f99c 	bl	800015c <__adddf3>
 8004e24:	e9da 8900 	ldrd	r8, r9, [sl]
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4640      	mov	r0, r8
 8004e2e:	4649      	mov	r1, r9
 8004e30:	f7fb fdbc 	bl	80009ac <__aeabi_dcmplt>
 8004e34:	b120      	cbz	r0, 8004e40 <__ieee754_sqrt+0x19c>
 8004e36:	1ca1      	adds	r1, r4, #2
 8004e38:	bf08      	it	eq
 8004e3a:	3501      	addeq	r5, #1
 8004e3c:	3402      	adds	r4, #2
 8004e3e:	e7ca      	b.n	8004dd6 <__ieee754_sqrt+0x132>
 8004e40:	3401      	adds	r4, #1
 8004e42:	f024 0401 	bic.w	r4, r4, #1
 8004e46:	e7c6      	b.n	8004dd6 <__ieee754_sqrt+0x132>
 8004e48:	7ff00000 	.word	0x7ff00000
 8004e4c:	200000a0 	.word	0x200000a0
 8004e50:	200000a8 	.word	0x200000a8

08004e54 <_init>:
 8004e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e56:	bf00      	nop
 8004e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5a:	bc08      	pop	{r3}
 8004e5c:	469e      	mov	lr, r3
 8004e5e:	4770      	bx	lr

08004e60 <_fini>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	bf00      	nop
 8004e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e66:	bc08      	pop	{r3}
 8004e68:	469e      	mov	lr, r3
 8004e6a:	4770      	bx	lr
